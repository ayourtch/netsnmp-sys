extern crate libc;
/* automatically generated by rust-bindgen and then gently massaged afterwards */

pub type oid = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_netsnmp_vardata {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_netsnmp_vardata {
    pub unsafe fn integer(&mut self) -> *mut *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string(&mut self) -> *mut *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn objid(&mut self) -> *mut *mut oid {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bitstring(&mut self) -> *mut *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn counter64(&mut self) -> *mut *mut Struct_counter64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn floatVal(&mut self) -> *mut *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn doubleVal(&mut self) -> *mut *mut ::std::os::raw::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_netsnmp_vardata {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_netsnmp_vardata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_vardata = Union_netsnmp_vardata;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_variable_list {
    pub next_variable: *mut Struct_variable_list,
    pub name: *mut oid,
    pub name_length: libc::size_t,
    pub _type: ::std::os::raw::c_uchar,
    pub val: netsnmp_vardata,
    pub val_len: libc::size_t,
    pub name_loc: [oid; 128usize],
    pub buf: [::std::os::raw::c_uchar; 40usize],
    pub data: *mut ::std::os::raw::c_void,
    pub dataFreeHook: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut ::std::os::raw::c_void)>,
    pub index: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_variable_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_variable_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_variable_list = Struct_variable_list;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_pdu {
    pub version: ::std::os::raw::c_long,
    pub command: ::std::os::raw::c_int,
    pub reqid: ::std::os::raw::c_long,
    pub msgid: ::std::os::raw::c_long,
    pub transid: ::std::os::raw::c_long,
    pub sessid: ::std::os::raw::c_long,
    pub errstat: ::std::os::raw::c_long,
    pub errindex: ::std::os::raw::c_long,
    pub time: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub msgParseModel: ::std::os::raw::c_int,
    pub transport_data: *mut ::std::os::raw::c_void,
    pub transport_data_length: ::std::os::raw::c_int,
    pub tDomain: *const oid,
    pub tDomainLen: libc::size_t,
    pub variables: *mut netsnmp_variable_list,
    pub community: *mut ::std::os::raw::c_uchar,
    pub community_len: libc::size_t,
    pub enterprise: *mut oid,
    pub enterprise_length: libc::size_t,
    pub trap_type: ::std::os::raw::c_long,
    pub specific_type: ::std::os::raw::c_long,
    pub agent_addr: [::std::os::raw::c_uchar; 4usize],
    pub contextEngineID: *mut ::std::os::raw::c_uchar,
    pub contextEngineIDLen: libc::size_t,
    pub contextName: *mut ::std::os::raw::c_char,
    pub contextNameLen: libc::size_t,
    pub securityEngineID: *mut ::std::os::raw::c_uchar,
    pub securityEngineIDLen: libc::size_t,
    pub securityName: *mut ::std::os::raw::c_char,
    pub securityNameLen: libc::size_t,
    pub priority: ::std::os::raw::c_int,
    pub range_subid: ::std::os::raw::c_int,
    pub securityStateRef: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_snmp_pdu {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_pdu {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_pdu = Struct_snmp_pdu;
pub type netsnmp_session = Struct_snmp_session;
pub type snmp_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                                               arg2: *mut netsnmp_session,
                                               arg3: ::std::os::raw::c_int,
                                               arg4: *mut netsnmp_pdu,
                                               arg5:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type netsnmp_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                                               arg2: *mut netsnmp_session,
                                               arg3: ::std::os::raw::c_int,
                                               arg4: *mut netsnmp_pdu,
                                               arg5:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum Struct_netsnmp_container_s { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_session {
    pub version: ::std::os::raw::c_long,
    pub retries: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_long,
    pub flags: ::std::os::raw::c_ulong,
    pub subsession: *mut Struct_snmp_session,
    pub next: *mut Struct_snmp_session,
    pub peername: *mut ::std::os::raw::c_char,
    pub remote_port: ::std::os::raw::c_ushort,
    pub localname: *mut ::std::os::raw::c_char,
    pub local_port: ::std::os::raw::c_ushort,
    pub authenticator: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_uchar,
                                                                  arg2:
                                                                      *mut libc::size_t,
                                                                  arg3:
                                                                      *mut ::std::os::raw::c_uchar,
                                                                  arg4:
                                                                      libc::size_t)
                                                 -> *mut ::std::os::raw::c_uchar>,
    pub callback: netsnmp_callback,
    pub callback_magic: *mut ::std::os::raw::c_void,
    pub s_errno: ::std::os::raw::c_int,
    pub s_snmp_errno: ::std::os::raw::c_int,
    pub sessid: ::std::os::raw::c_long,
    pub community: *mut ::std::os::raw::c_uchar,
    pub community_len: libc::size_t,
    pub rcvMsgMaxSize: libc::size_t,
    pub sndMsgMaxSize: libc::size_t,
    pub isAuthoritative: ::std::os::raw::c_uchar,
    pub contextEngineID: *mut ::std::os::raw::c_uchar,
    pub contextEngineIDLen: libc::size_t,
    pub engineBoots: ::std::os::raw::c_uint,
    pub engineTime: ::std::os::raw::c_uint,
    pub contextName: *mut ::std::os::raw::c_char,
    pub contextNameLen: libc::size_t,
    pub securityEngineID: *mut ::std::os::raw::c_uchar,
    pub securityEngineIDLen: libc::size_t,
    pub securityName: *mut ::std::os::raw::c_char,
    pub securityNameLen: libc::size_t,
    pub securityAuthProto: *mut oid,
    pub securityAuthProtoLen: libc::size_t,
    pub securityAuthKey: [::std::os::raw::c_uchar; 32usize],
    pub securityAuthKeyLen: libc::size_t,
    pub securityAuthLocalKey: *mut ::std::os::raw::c_uchar,
    pub securityAuthLocalKeyLen: libc::size_t,
    pub securityPrivProto: *mut oid,
    pub securityPrivProtoLen: libc::size_t,
    pub securityPrivKey: [::std::os::raw::c_uchar; 32usize],
    pub securityPrivKeyLen: libc::size_t,
    pub securityPrivLocalKey: *mut ::std::os::raw::c_uchar,
    pub securityPrivLocalKeyLen: libc::size_t,
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub paramName: *mut ::std::os::raw::c_char,
    pub securityInfo: *mut ::std::os::raw::c_void,
    pub transport_configuration: *mut Struct_netsnmp_container_s,
    pub myvoid: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_snmp_session {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_session {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_index_s {
    pub len: libc::size_t,
    pub oids: *mut oid,
}
impl ::std::clone::Clone for Struct_netsnmp_index_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_index_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_index = Struct_netsnmp_index_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_void_array_s {
    pub size: libc::size_t,
    pub array: *mut *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_void_array_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_void_array_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_void_array = Struct_netsnmp_void_array_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_ref_void {
    pub val: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_ref_void {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_ref_void {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_ref_void = Struct_netsnmp_ref_void;
#[repr(C)]
#[derive(Copy)]
pub struct Union_netsnmp_cvalue {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_netsnmp_cvalue {
    pub unsafe fn ul(&mut self) -> *mut ::std::os::raw::c_ulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut ::std::os::raw::c_ushort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sl(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn si(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ss(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sc(&mut self) -> *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cp(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn vp(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_netsnmp_cvalue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_netsnmp_cvalue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_cvalue = Union_netsnmp_cvalue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_ref_size_t_s {
    pub val: libc::size_t,
}
impl ::std::clone::Clone for Struct_netsnmp_ref_size_t_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_ref_size_t_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_ref_size_t = *mut Struct_netsnmp_ref_size_t_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_large_fd_set_s {
    pub lfs_setsize: ::std::os::raw::c_uint,
    pub lfs_setptr: *mut libc::fd_set,
    pub lfs_set: libc::fd_set,
}
impl ::std::clone::Clone for Struct_netsnmp_large_fd_set_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_large_fd_set_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_large_fd_set = Struct_netsnmp_large_fd_set_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_counter64 {
    pub high: ::std::os::raw::c_ulong,
    pub low: ::std::os::raw::c_ulong,
}
impl ::std::clone::Clone for Struct_counter64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_counter64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type integer64 = Struct_counter64;
pub type unsigned64 = Struct_counter64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_token_descr_s {
    pub token_name: *mut ::std::os::raw::c_char,
    pub enabled: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_netsnmp_token_descr_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_token_descr_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_token_descr = Struct_netsnmp_token_descr_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_log_message {
    pub priority: ::std::os::raw::c_int,
    pub msg: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_snmp_log_message {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_log_message {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_log_handler = Struct_netsnmp_log_handler_s;
pub type NetsnmpLogHandler =
    unsafe extern "C" fn(arg1: *mut netsnmp_log_handler,
                         arg2: ::std::os::raw::c_int,
                         arg3: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_log_handler_s {
    pub enabled: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pri_max: ::std::os::raw::c_int,
    pub _type: ::std::os::raw::c_int,
    pub token: *const ::std::os::raw::c_char,
    pub handler: *mut NetsnmpLogHandler,
    pub imagic: ::std::os::raw::c_int,
    pub magic: *mut ::std::os::raw::c_void,
    pub next: *mut netsnmp_log_handler,
    pub prev: *mut netsnmp_log_handler,
}
impl ::std::clone::Clone for Struct_netsnmp_log_handler_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_log_handler_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_synch_state {
    pub waiting: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub reqid: ::std::os::raw::c_int,
    pub pdu: *mut netsnmp_pdu,
}
impl ::std::clone::Clone for Struct_synch_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_synch_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_state_machine_func =
    unsafe extern "C" fn(input: *mut Struct_netsnmp_state_machine_input_s,
                         step: *mut Struct_netsnmp_state_machine_step_s)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_state_machine_step_s {
    pub name: *const ::std::os::raw::c_char,
    pub sm_flags: ::std::os::raw::c_uint,
    pub run: *mut netsnmp_state_machine_func,
    pub result: ::std::os::raw::c_int,
    pub on_success: *mut Struct_netsnmp_state_machine_step_s,
    pub on_error: *mut Struct_netsnmp_state_machine_step_s,
    pub flags: ::std::os::raw::c_uint,
    pub step_context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_state_machine_step_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_state_machine_step_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_state_machine_step = Struct_netsnmp_state_machine_step_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_state_machine_input_s {
    pub name: *const ::std::os::raw::c_char,
    pub steps_so_far: ::std::os::raw::c_int,
    pub steps: *mut netsnmp_state_machine_step,
    pub cleanup: *mut netsnmp_state_machine_step,
    pub last_run: *mut netsnmp_state_machine_step,
    pub input_context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_state_machine_input_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_state_machine_input_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_state_machine_input = Struct_netsnmp_state_machine_input_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_enum_list {
    pub next: *mut Struct_enum_list,
    pub value: ::std::os::raw::c_int,
    pub label: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_enum_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_enum_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_range_list {
    pub next: *mut Struct_range_list,
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_range_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_range_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_index_list {
    pub next: *mut Struct_index_list,
    pub ilabel: *mut ::std::os::raw::c_char,
    pub isimplied: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_index_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_index_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_varbind_list {
    pub next: *mut Struct_varbind_list,
    pub vblabel: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_varbind_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_varbind_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tree {
    pub child_list: *mut Struct_tree,
    pub next_peer: *mut Struct_tree,
    pub next: *mut Struct_tree,
    pub parent: *mut Struct_tree,
    pub label: *mut ::std::os::raw::c_char,
    pub subid: ::std::os::raw::c_ulong,
    pub modid: ::std::os::raw::c_int,
    pub number_modules: ::std::os::raw::c_int,
    pub module_list: *mut ::std::os::raw::c_int,
    pub tc_index: ::std::os::raw::c_int,
    pub _type: ::std::os::raw::c_int,
    pub access: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub enums: *mut Struct_enum_list,
    pub ranges: *mut Struct_range_list,
    pub indexes: *mut Struct_index_list,
    pub augments: *mut ::std::os::raw::c_char,
    pub varbinds: *mut Struct_varbind_list,
    pub hint: *mut ::std::os::raw::c_char,
    pub units: *mut ::std::os::raw::c_char,
    pub printomat: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut *mut ::std::os::raw::c_uchar,
                                                              arg2:
                                                                  *mut libc::size_t,
                                                              arg3:
                                                                  *mut libc::size_t,
                                                              arg4:
                                                                  ::std::os::raw::c_int,
                                                              arg5:
                                                                  *const netsnmp_variable_list,
                                                              arg6:
                                                                  *const Struct_enum_list,
                                                              arg7:
                                                                  *const ::std::os::raw::c_char,
                                                              arg8:
                                                                  *const ::std::os::raw::c_char)
                                             -> ::std::os::raw::c_int>,
    pub printer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut ::std::os::raw::c_char,
                                                            arg2:
                                                                *const netsnmp_variable_list,
                                                            arg3:
                                                                *const Struct_enum_list,
                                                            arg4:
                                                                *const ::std::os::raw::c_char,
                                                            arg5:
                                                                *const ::std::os::raw::c_char)>,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub reported: ::std::os::raw::c_int,
    pub defaultValue: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_tree {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tree {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_module_import {
    pub label: *mut ::std::os::raw::c_char,
    pub modid: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_module_import {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_module_import {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_module {
    pub name: *mut ::std::os::raw::c_char,
    pub file: *mut ::std::os::raw::c_char,
    pub imports: *mut Struct_module_import,
    pub no_imports: ::std::os::raw::c_int,
    pub modid: ::std::os::raw::c_int,
    pub next: *mut Struct_module,
}
impl ::std::clone::Clone for Struct_module {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_module {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_module_compatability {
    pub old_module: *const ::std::os::raw::c_char,
    pub new_module: *const ::std::os::raw::c_char,
    pub tag: *const ::std::os::raw::c_char,
    pub tag_len: libc::size_t,
    pub next: *mut Struct_module_compatability,
}
impl ::std::clone::Clone for Struct_module_compatability {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_module_compatability {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SNMPCallback =
    unsafe extern "C" fn(majorID: ::std::os::raw::c_int,
                         minorID: ::std::os::raw::c_int,
                         serverarg: *mut ::std::os::raw::c_void,
                         clientarg: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_gen_callback {
    pub sc_callback: *mut SNMPCallback,
    pub sc_client_arg: *mut ::std::os::raw::c_void,
    pub priority: ::std::os::raw::c_int,
    pub next: *mut Struct_snmp_gen_callback,
}
impl ::std::clone::Clone for Struct_snmp_gen_callback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_gen_callback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NetSNMPStashDump =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char, arg2: libc::size_t,
                         arg3: *mut ::std::os::raw::c_void,
                         arg4: *mut Struct_netsnmp_oid_stash_node_s)
        -> ::std::os::raw::c_int;
pub type NetSNMPStashFreeNode =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_oid_stash_node_s {
    pub value: oid,
    pub children: *mut *mut Struct_netsnmp_oid_stash_node_s,
    pub children_size: libc::size_t,
    pub next_sibling: *mut Struct_netsnmp_oid_stash_node_s,
    pub prev_sibling: *mut Struct_netsnmp_oid_stash_node_s,
    pub parent: *mut Struct_netsnmp_oid_stash_node_s,
    pub thedata: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_oid_stash_node_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_oid_stash_node_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_oid_stash_node = Struct_netsnmp_oid_stash_node_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_oid_stash_save_info_s {
    pub token: *const ::std::os::raw::c_char,
    pub root: *mut *mut netsnmp_oid_stash_node,
    pub dumpfn: *mut NetSNMPStashDump,
}
impl ::std::clone::Clone for Struct_netsnmp_oid_stash_save_info_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_oid_stash_save_info_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_oid_stash_save_info = Struct_netsnmp_oid_stash_save_info_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_addr_pair_s {
    pub remote_addr: libc::sockaddr_in,
    pub local_addr: libc::sockaddr_in,
}
impl ::std::clone::Clone for Struct_netsnmp_addr_pair_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_addr_pair_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_addr_pair = Struct_netsnmp_addr_pair_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_indexed_addr_pair_s {
    pub remote_addr: libc::sockaddr_in,
    pub local_addr: libc::sockaddr_in,
    pub if_index: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_netsnmp_indexed_addr_pair_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_indexed_addr_pair_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_indexed_addr_pair = Struct_netsnmp_indexed_addr_pair_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_tmStateReference_s {
    pub transportDomain: [oid; 128usize],
    pub transportDomainLen: libc::size_t,
    pub securityName: [::std::os::raw::c_char; 256usize],
    pub securityNameLen: libc::size_t,
    pub requestedSecurityLevel: ::std::os::raw::c_int,
    pub transportSecurityLevel: ::std::os::raw::c_int,
    pub sameSecurity: ::std::os::raw::c_char,
    pub sessionID: [::std::os::raw::c_char; 8usize],
    pub have_addresses: ::std::os::raw::c_char,
    pub addresses: netsnmp_indexed_addr_pair,
    pub otherTransportOpaque: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_netsnmp_tmStateReference_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_tmStateReference_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_tmStateReference = Struct_netsnmp_tmStateReference_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_transport_s {
    pub domain: *const oid,
    pub domain_length: ::std::os::raw::c_int,
    pub local: *mut ::std::os::raw::c_uchar,
    pub local_length: ::std::os::raw::c_int,
    pub remote: *mut ::std::os::raw::c_uchar,
    pub remote_length: ::std::os::raw::c_int,
    pub sock: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub data_length: ::std::os::raw::c_int,
    pub msgMaxSize: libc::size_t,
    pub tmStateRef: *mut netsnmp_tmStateReference,
    pub f_recv: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut Struct_netsnmp_transport_s,
                                                           arg2:
                                                               *mut ::std::os::raw::c_void,
                                                           arg3:
                                                               ::std::os::raw::c_int,
                                                           arg4:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           arg5:
                                                               *mut ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub f_send: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut Struct_netsnmp_transport_s,
                                                           arg2:
                                                               *mut ::std::os::raw::c_void,
                                                           arg3:
                                                               ::std::os::raw::c_int,
                                                           arg4:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           arg5:
                                                               *mut ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub f_close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut Struct_netsnmp_transport_s)
                                           -> ::std::os::raw::c_int>,
    pub f_open: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut Struct_netsnmp_transport_s)
                                          -> *mut Struct_netsnmp_transport_s>,
    pub f_accept: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_netsnmp_transport_s)
                                            -> ::std::os::raw::c_int>,
    pub f_fmtaddr: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut Struct_netsnmp_transport_s,
                                                              arg2:
                                                                  *mut ::std::os::raw::c_void,
                                                              arg3:
                                                                  ::std::os::raw::c_int)
                                             -> *mut ::std::os::raw::c_char>,
    pub f_config: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_netsnmp_transport_s,
                                                             arg2:
                                                                 *const ::std::os::raw::c_char,
                                                             arg3:
                                                                 *const ::std::os::raw::c_char)
                                            -> ::std::os::raw::c_int>,
    pub f_copy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut Struct_netsnmp_transport_s,
                                                           arg2:
                                                               *mut Struct_netsnmp_transport_s)
                                          -> ::std::os::raw::c_int>,
    pub f_setup_session: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut Struct_netsnmp_transport_s,
                                                                    arg2:
                                                                        *mut Struct_snmp_session)
                                                   -> ::std::os::raw::c_int>,
    pub identifier: *mut ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_netsnmp_transport_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_transport_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_transport = Struct_netsnmp_transport_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_transport_list_s {
    pub transport: *mut netsnmp_transport,
    pub next: *mut Struct_netsnmp_transport_list_s,
}
impl ::std::clone::Clone for Struct_netsnmp_transport_list_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_transport_list_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_transport_list = Struct_netsnmp_transport_list_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_tdomain_s {
    pub name: *const oid,
    pub name_length: libc::size_t,
    pub prefix: *mut *const ::std::os::raw::c_char,
    pub f_create_from_tstring: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *const ::std::os::raw::c_char,
                                                                          arg2:
                                                                              ::std::os::raw::c_int)
                                                         ->
                                                             *mut netsnmp_transport>,
    pub f_create_from_ostring: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *const ::std::os::raw::c_uchar,
                                                                          arg2:
                                                                              libc::size_t,
                                                                          arg3:
                                                                              ::std::os::raw::c_int)
                                                         ->
                                                             *mut netsnmp_transport>,
    pub next: *mut Struct_netsnmp_tdomain_s,
    pub f_create_from_tstring_new: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *const ::std::os::raw::c_char,
                                                                              arg2:
                                                                                  ::std::os::raw::c_int,
                                                                              arg3:
                                                                                  *const ::std::os::raw::c_char)
                                                             ->
                                                                 *mut netsnmp_transport>,
}
impl ::std::clone::Clone for Struct_netsnmp_tdomain_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_tdomain_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_tdomain = Struct_netsnmp_tdomain_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_transport_config_s {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_netsnmp_transport_config_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_transport_config_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_transport_config = Struct_netsnmp_transport_config_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_callback_pass_s {
    pub return_transport_num: ::std::os::raw::c_int,
    pub pdu: *mut netsnmp_pdu,
    pub next: *mut Struct_netsnmp_callback_pass_s,
}
impl ::std::clone::Clone for Struct_netsnmp_callback_pass_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_callback_pass_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_callback_pass = Struct_netsnmp_callback_pass_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netsnmp_callback_info_s {
    pub linkedto: ::std::os::raw::c_int,
    pub parent_data: *mut ::std::os::raw::c_void,
    pub data: *mut netsnmp_callback_pass,
    pub callback_num: ::std::os::raw::c_int,
    pub pipefds: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_netsnmp_callback_info_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netsnmp_callback_info_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type netsnmp_callback_info = Struct_netsnmp_callback_info_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_config_files {
    pub fileHeader: *mut ::std::os::raw::c_char,
    pub start: *mut Struct_config_line,
    pub next: *mut Struct_config_files,
}
impl ::std::clone::Clone for Struct_config_files {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_config_files {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_config_line {
    pub config_token: *mut ::std::os::raw::c_char,
    pub parse_line: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const ::std::os::raw::c_char,
                                                               arg2:
                                                                   *mut ::std::os::raw::c_char)>,
    pub free_func: ::std::option::Option<extern "C" fn()>,
    pub next: *mut Struct_config_line,
    pub config_time: ::std::os::raw::c_char,
    pub help: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_config_line {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_config_line {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_read_config_memory {
    pub line: *mut ::std::os::raw::c_char,
    pub next: *mut Struct_read_config_memory,
}
impl ::std::clone::Clone for Struct_read_config_memory {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_read_config_memory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_enum_list {
    pub next: *mut Struct_snmp_enum_list,
    pub value: ::std::os::raw::c_int,
    pub label: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_snmp_enum_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_enum_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vacm_groupEntry {
    pub securityModel: ::std::os::raw::c_int,
    pub securityName: [::std::os::raw::c_char; 34usize],
    pub groupName: [::std::os::raw::c_char; 34usize],
    pub storageType: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub bitMask: ::std::os::raw::c_ulong,
    pub reserved: *mut Struct_vacm_groupEntry,
    pub next: *mut Struct_vacm_groupEntry,
}
impl ::std::clone::Clone for Struct_vacm_groupEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vacm_groupEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vacm_accessEntry {
    pub groupName: [::std::os::raw::c_char; 34usize],
    pub contextPrefix: [::std::os::raw::c_char; 34usize],
    pub securityModel: ::std::os::raw::c_int,
    pub securityLevel: ::std::os::raw::c_int,
    pub contextMatch: ::std::os::raw::c_int,
    pub views: [[::std::os::raw::c_char; 34usize]; 8usize],
    pub storageType: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub bitMask: ::std::os::raw::c_ulong,
    pub reserved: *mut Struct_vacm_accessEntry,
    pub next: *mut Struct_vacm_accessEntry,
}
impl ::std::clone::Clone for Struct_vacm_accessEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vacm_accessEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vacm_viewEntry {
    pub viewName: [::std::os::raw::c_char; 34usize],
    pub viewSubtree: [oid; 128usize],
    pub viewSubtreeLen: libc::size_t,
    pub viewMask: [::std::os::raw::c_uchar; 34usize],
    pub viewMaskLen: libc::size_t,
    pub viewType: ::std::os::raw::c_int,
    pub viewStorageType: ::std::os::raw::c_int,
    pub viewStatus: ::std::os::raw::c_int,
    pub bitMask: ::std::os::raw::c_ulong,
    pub reserved: *mut Struct_vacm_viewEntry,
    pub next: *mut Struct_vacm_viewEntry,
}
impl ::std::clone::Clone for Struct_vacm_viewEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vacm_viewEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_vacm_securityEntry { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_enginetime_struct {
    pub engineID: *mut ::std::os::raw::c_uchar,
    pub engineID_len: ::std::os::raw::c_uint,
    pub engineTime: ::std::os::raw::c_uint,
    pub engineBoot: ::std::os::raw::c_uint,
    pub lastReceivedEngineTime: libc::time_t,
    pub authenticatedFlag: ::std::os::raw::c_uint,
    pub next: *mut Struct_enginetime_struct,
}
impl ::std::clone::Clone for Struct_enginetime_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_enginetime_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type enginetime = Struct_enginetime_struct;
pub type Enginetime = *mut Struct_enginetime_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_secmod_outgoing_params {
    pub msgProcModel: ::std::os::raw::c_int,
    pub globalData: *mut ::std::os::raw::c_uchar,
    pub globalDataLen: libc::size_t,
    pub maxMsgSize: ::std::os::raw::c_int,
    pub secModel: ::std::os::raw::c_int,
    pub secEngineID: *mut ::std::os::raw::c_uchar,
    pub secEngineIDLen: libc::size_t,
    pub secName: *mut ::std::os::raw::c_char,
    pub secNameLen: libc::size_t,
    pub secLevel: ::std::os::raw::c_int,
    pub scopedPdu: *mut ::std::os::raw::c_uchar,
    pub scopedPduLen: libc::size_t,
    pub secStateRef: *mut ::std::os::raw::c_void,
    pub secParams: *mut ::std::os::raw::c_uchar,
    pub secParamsLen: *mut libc::size_t,
    pub wholeMsg: *mut *mut ::std::os::raw::c_uchar,
    pub wholeMsgLen: *mut libc::size_t,
    pub wholeMsgOffset: *mut libc::size_t,
    pub pdu: *mut netsnmp_pdu,
    pub session: *mut netsnmp_session,
}
impl ::std::clone::Clone for Struct_snmp_secmod_outgoing_params {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_secmod_outgoing_params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_secmod_incoming_params {
    pub msgProcModel: ::std::os::raw::c_int,
    pub maxMsgSize: libc::size_t,
    pub secParams: *mut ::std::os::raw::c_uchar,
    pub secModel: ::std::os::raw::c_int,
    pub secLevel: ::std::os::raw::c_int,
    pub wholeMsg: *mut ::std::os::raw::c_uchar,
    pub wholeMsgLen: libc::size_t,
    pub secEngineID: *mut ::std::os::raw::c_uchar,
    pub secEngineIDLen: *mut libc::size_t,
    pub secName: *mut ::std::os::raw::c_char,
    pub secNameLen: *mut libc::size_t,
    pub scopedPdu: *mut *mut ::std::os::raw::c_uchar,
    pub scopedPduLen: *mut libc::size_t,
    pub maxSizeResponse: *mut libc::size_t,
    pub secStateRef: *mut *mut ::std::os::raw::c_void,
    pub sess: *mut netsnmp_session,
    pub pdu: *mut netsnmp_pdu,
    pub msg_flags: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_snmp_secmod_incoming_params {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_secmod_incoming_params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SecmodSessionCallback =
    unsafe extern "C" fn(arg1: *mut netsnmp_session) -> ::std::os::raw::c_int;
pub type SecmodPduCallback =
    unsafe extern "C" fn(arg1: *mut netsnmp_pdu) -> ::std::os::raw::c_int;
pub type Secmod2PduCallback =
    unsafe extern "C" fn(arg1: *mut netsnmp_pdu, arg2: *mut netsnmp_pdu)
        -> ::std::os::raw::c_int;
pub type SecmodOutMsg =
    unsafe extern "C" fn(arg1: *mut Struct_snmp_secmod_outgoing_params)
        -> ::std::os::raw::c_int;
pub type SecmodInMsg =
    unsafe extern "C" fn(arg1: *mut Struct_snmp_secmod_incoming_params)
        -> ::std::os::raw::c_int;
pub type SecmodFreeState =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void);
pub type SecmodHandleReport =
    unsafe extern "C" fn(sessp: *mut ::std::os::raw::c_void,
                         transport: *mut netsnmp_transport,
                         arg1: *mut netsnmp_session,
                         result: ::std::os::raw::c_int,
                         origpdu: *mut netsnmp_pdu);
pub type SecmodDiscoveryMethod =
    unsafe extern "C" fn(slp: *mut ::std::os::raw::c_void,
                         session: *mut netsnmp_session)
        -> ::std::os::raw::c_int;
pub type SecmodSessionSetup =
    unsafe extern "C" fn(in_session: *mut netsnmp_session,
                         out_session: *mut netsnmp_session)
        -> ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_secmod_def {
    pub session_open: *mut SecmodSessionCallback,
    pub session_close: *mut SecmodSessionCallback,
    pub session_setup: *mut SecmodSessionSetup,
    pub pdu_free: *mut SecmodPduCallback,
    pub pdu_clone: *mut Secmod2PduCallback,
    pub pdu_timeout: *mut SecmodPduCallback,
    pub pdu_free_state_ref: *mut SecmodFreeState,
    pub encode_reverse: *mut SecmodOutMsg,
    pub encode_forward: *mut SecmodOutMsg,
    pub decode: *mut SecmodInMsg,
    pub handle_report: *mut SecmodHandleReport,
    pub probe_engineid: *mut SecmodDiscoveryMethod,
}
impl ::std::clone::Clone for Struct_snmp_secmod_def {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_secmod_def {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_snmp_secmod_list {
    pub securityModel: ::std::os::raw::c_int,
    pub secDef: *mut Struct_snmp_secmod_def,
    pub next: *mut Struct_snmp_secmod_list,
}
impl ::std::clone::Clone for Struct_snmp_secmod_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_snmp_secmod_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_usmStateReference {
    pub usr_name: *mut ::std::os::raw::c_char,
    pub usr_name_length: libc::size_t,
    pub usr_engine_id: *mut ::std::os::raw::c_uchar,
    pub usr_engine_id_length: libc::size_t,
    pub usr_auth_protocol: *mut oid,
    pub usr_auth_protocol_length: libc::size_t,
    pub usr_auth_key: *mut ::std::os::raw::c_uchar,
    pub usr_auth_key_length: libc::size_t,
    pub usr_priv_protocol: *mut oid,
    pub usr_priv_protocol_length: libc::size_t,
    pub usr_priv_key: *mut ::std::os::raw::c_uchar,
    pub usr_priv_key_length: libc::size_t,
    pub usr_sec_level: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_usmStateReference {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_usmStateReference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_usmUser {
    pub engineID: *mut ::std::os::raw::c_uchar,
    pub engineIDLen: libc::size_t,
    pub name: *mut ::std::os::raw::c_char,
    pub secName: *mut ::std::os::raw::c_char,
    pub cloneFrom: *mut oid,
    pub cloneFromLen: libc::size_t,
    pub authProtocol: *mut oid,
    pub authProtocolLen: libc::size_t,
    pub authKey: *mut ::std::os::raw::c_uchar,
    pub authKeyLen: libc::size_t,
    pub privProtocol: *mut oid,
    pub privProtocolLen: libc::size_t,
    pub privKey: *mut ::std::os::raw::c_uchar,
    pub privKeyLen: libc::size_t,
    pub userPublicString: *mut ::std::os::raw::c_uchar,
    pub userPublicStringLen: libc::size_t,
    pub userStatus: ::std::os::raw::c_int,
    pub userStorageType: ::std::os::raw::c_int,
    pub usmDHUserAuthKeyChange: *mut ::std::os::raw::c_void,
    pub usmDHUserPrivKeyChange: *mut ::std::os::raw::c_void,
    pub next: *mut Struct_usmUser,
    pub prev: *mut Struct_usmUser,
}
impl ::std::clone::Clone for Struct_usmUser {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_usmUser {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut debug_num_tokens: ::std::os::raw::c_int;
    pub static mut dbg_tokens: [netsnmp_token_descr; 256usize];
    pub static mut sid: *mut ::std::os::raw::c_uchar;
    pub static mut snmp_errno: ::std::os::raw::c_int;
    pub static mut netsnmpUDPDomain: *mut oid;
    pub static mut netsnmpCLNSDomain: *mut oid;
    pub static mut netsnmpCONSDomain: *mut oid;
    pub static mut netsnmpDDPDomain: *mut oid;
    pub static mut netsnmpIPXDomain: *mut oid;
    pub static mut netsnmpUDPDomain_len: libc::size_t;
    pub static mut netsnmpCLNSDomain_len: libc::size_t;
    pub static mut netsnmpCONSDomain_len: libc::size_t;
    pub static mut netsnmpDDPDomain_len: libc::size_t;
    pub static mut netsnmpIPXDomain_len: libc::size_t;
    pub static mut netsnmp_UnixDomain: *mut oid;
    pub static mut netsnmp_snmpTCPDomain: *mut oid;
    pub static mut netsnmp_UDPIPv6Domain: *mut oid;
    pub static mut netsnmp_TCPIPv6Domain: *mut oid;
    pub static mut usmNoAuthProtocol: [oid; 10usize];
    pub static mut usmHMACMD5AuthProtocol: [oid; 10usize];
    pub static mut usmHMACSHA1AuthProtocol: [oid; 10usize];
    pub static mut usmNoPrivProtocol: [oid; 10usize];
    pub static mut usmDESPrivProtocol: [oid; 10usize];
    pub static mut usmAESPrivProtocol: [oid; 10usize];
    pub static mut usmAES128PrivProtocol: *mut oid;
}
extern "C" {
    pub fn snmp_pdu_add_variable(pdu: *mut netsnmp_pdu, name: *const oid,
                                 name_length: libc::size_t, _type: ::std::os::raw::c_uchar,
                                 value: *const ::std::os::raw::c_void,
                                 len: libc::size_t) -> *mut netsnmp_variable_list;
    pub fn snmp_varlist_add_variable(varlist: *mut *mut netsnmp_variable_list,
                                     name: *const oid, name_length: libc::size_t,
                                     _type: ::std::os::raw::c_uchar,
                                     value: *const ::std::os::raw::c_void,
                                     len: libc::size_t)
     -> *mut netsnmp_variable_list;
    pub fn snmp_add_null_var(pdu: *mut netsnmp_pdu, name: *const oid,
                             name_length: libc::size_t)
     -> *mut netsnmp_variable_list;
    pub fn snmp_clone_varbind(varlist: *mut netsnmp_variable_list)
     -> *mut netsnmp_variable_list;
    pub fn snmp_set_var_objid(var: *mut netsnmp_variable_list,
                              name: *const oid, name_length: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmp_set_var_value(var: *mut netsnmp_variable_list,
                              value: *const ::std::os::raw::c_void,
                              len: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmp_set_var_typed_value(var: *mut netsnmp_variable_list,
                                    _type: ::std::os::raw::c_uchar,
                                    value: *const ::std::os::raw::c_void,
                                    len: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmp_set_var_typed_integer(var: *mut netsnmp_variable_list,
                                      _type: ::std::os::raw::c_uchar,
                                      val: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn print_variable(objid: *const oid, objidlen: libc::size_t,
                          variable: *const netsnmp_variable_list);
    pub fn fprint_variable(fp: *mut libc::FILE, objid: *const oid, objidlen: libc::size_t,
                           variable: *const netsnmp_variable_list);
    pub fn snprint_variable(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                            objid: *const oid, objidlen: libc::size_t,
                            variable: *const netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn print_value(objid: *const oid, objidlen: libc::size_t,
                       variable: *const netsnmp_variable_list);
    pub fn fprint_value(fp: *mut libc::FILE, objid: *const oid, objidlen: libc::size_t,
                        variable: *const netsnmp_variable_list);
    pub fn snprint_value(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                         objid: *const oid, objidlen: libc::size_t,
                         variable: *const netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn snmp_free_var(var: *mut netsnmp_variable_list);
    pub fn snmp_free_varbind(varlist: *mut netsnmp_variable_list);
    pub fn snmp_pdu_create(_type: ::std::os::raw::c_int) -> *mut netsnmp_pdu;
    pub fn snmp_clone_pdu(pdu: *mut netsnmp_pdu) -> *mut netsnmp_pdu;
    pub fn snmp_fix_pdu(pdu: *mut netsnmp_pdu, idx: ::std::os::raw::c_int)
     -> *mut netsnmp_pdu;
    pub fn snmp_free_pdu(pdu: *mut netsnmp_pdu);
    pub fn asn_check_packet(arg1: *mut ::std::os::raw::c_uchar, arg2: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_parse_int(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                         arg3: *mut ::std::os::raw::c_uchar, arg4: *mut ::std::os::raw::c_long,
                         arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_int(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t, arg3: ::std::os::raw::c_uchar,
                         arg4: *const ::std::os::raw::c_long, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_unsigned_int(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                  arg3: *mut ::std::os::raw::c_uchar, arg4: *mut ::std::os::raw::c_ulong,
                                  arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_unsigned_int(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                  arg3: ::std::os::raw::c_uchar, arg4: *const ::std::os::raw::c_ulong,
                                  arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_string(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: *mut ::std::os::raw::c_uchar, arg4: *mut ::std::os::raw::c_uchar,
                            arg5: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_string(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: ::std::os::raw::c_uchar, arg4: *const ::std::os::raw::c_uchar, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_header(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: *mut ::std::os::raw::c_uchar) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_sequence(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                              arg3: *mut ::std::os::raw::c_uchar, expected_type: ::std::os::raw::c_uchar,
                              estr: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_header(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: ::std::os::raw::c_uchar, arg4: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_sequence(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                              arg3: ::std::os::raw::c_uchar, arg4: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_length(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_length(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_objid(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                           arg3: *mut ::std::os::raw::c_uchar, arg4: *mut oid,
                           arg5: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_objid(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t, arg3: ::std::os::raw::c_uchar,
                           arg4: *mut oid, arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_null(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                          arg3: *mut ::std::os::raw::c_uchar) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_null(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t, arg3: ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_bitstring(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                               arg3: *mut ::std::os::raw::c_uchar, arg4: *mut ::std::os::raw::c_uchar,
                               arg5: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_bitstring(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                               arg3: ::std::os::raw::c_uchar, arg4: *const ::std::os::raw::c_uchar,
                               arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_unsigned_int64(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                    arg3: *mut ::std::os::raw::c_uchar,
                                    arg4: *mut Struct_counter64, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_unsigned_int64(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                    arg3: ::std::os::raw::c_uchar,
                                    arg4: *const Struct_counter64,
                                    arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_signed_int64(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                  arg3: *mut ::std::os::raw::c_uchar,
                                  arg4: *mut Struct_counter64, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_signed_int64(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                  arg3: ::std::os::raw::c_uchar, arg4: *const Struct_counter64,
                                  arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_float(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t, arg3: ::std::os::raw::c_uchar,
                           arg4: *const ::std::os::raw::c_float, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_float(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                           arg3: *mut ::std::os::raw::c_uchar,
                           arg4: *mut ::std::os::raw::c_float, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_build_double(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: ::std::os::raw::c_uchar,
                            arg4: *const ::std::os::raw::c_double,
                            arg5: libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn asn_parse_double(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                            arg3: *mut ::std::os::raw::c_uchar,
                            arg4: *mut ::std::os::raw::c_double, arg5: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn asn_realloc(arg1: *mut *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_int(pkt: *mut *mut ::std::os::raw::c_uchar, pkt_len: *mut libc::size_t,
                                  offset: *mut libc::size_t,
                                  allow_realloc: ::std::os::raw::c_int,
                                  _type: ::std::os::raw::c_uchar,
                                  data: *const ::std::os::raw::c_long,
                                  data_size: libc::size_t) -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_string(pkt: *mut *mut ::std::os::raw::c_uchar,
                                     pkt_len: *mut libc::size_t,
                                     offset: *mut libc::size_t,
                                     allow_realloc: ::std::os::raw::c_int,
                                     _type: ::std::os::raw::c_uchar, data: *const ::std::os::raw::c_uchar,
                                     data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_unsigned_int(pkt: *mut *mut ::std::os::raw::c_uchar,
                                           pkt_len: *mut libc::size_t,
                                           offset: *mut libc::size_t,
                                           allow_realloc:
                                               ::std::os::raw::c_int,
                                           _type: ::std::os::raw::c_uchar, data: *const ::std::os::raw::c_ulong,
                                           data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_header(pkt: *mut *mut ::std::os::raw::c_uchar,
                                     pkt_len: *mut libc::size_t,
                                     offset: *mut libc::size_t,
                                     allow_realloc: ::std::os::raw::c_int,
                                     _type: ::std::os::raw::c_uchar, data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_sequence(pkt: *mut *mut ::std::os::raw::c_uchar,
                                       pkt_len: *mut libc::size_t,
                                       offset: *mut libc::size_t,
                                       allow_realloc: ::std::os::raw::c_int,
                                       _type: ::std::os::raw::c_uchar, data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_length(pkt: *mut *mut ::std::os::raw::c_uchar,
                                     pkt_len: *mut libc::size_t,
                                     offset: *mut libc::size_t,
                                     allow_realloc: ::std::os::raw::c_int,
                                     data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_objid(pkt: *mut *mut ::std::os::raw::c_uchar,
                                    pkt_len: *mut libc::size_t, offset: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    _type: ::std::os::raw::c_uchar, arg1: *const oid,
                                    arg2: libc::size_t) -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_null(pkt: *mut *mut ::std::os::raw::c_uchar,
                                   pkt_len: *mut libc::size_t, offset: *mut libc::size_t,
                                   allow_realloc: ::std::os::raw::c_int,
                                   _type: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_bitstring(pkt: *mut *mut ::std::os::raw::c_uchar,
                                        pkt_len: *mut libc::size_t,
                                        offset: *mut libc::size_t,
                                        allow_realloc: ::std::os::raw::c_int,
                                        _type: ::std::os::raw::c_uchar, data: *const ::std::os::raw::c_uchar,
                                        data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_unsigned_int64(pkt: *mut *mut ::std::os::raw::c_uchar,
                                             pkt_len: *mut libc::size_t,
                                             offset: *mut libc::size_t,
                                             allow_realloc:
                                                 ::std::os::raw::c_int,
                                             _type: ::std::os::raw::c_uchar,
                                             data: *const Struct_counter64,
                                             arg1: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_signed_int64(pkt: *mut *mut ::std::os::raw::c_uchar,
                                           pkt_len: *mut libc::size_t,
                                           offset: *mut libc::size_t,
                                           allow_realloc:
                                               ::std::os::raw::c_int,
                                           _type: ::std::os::raw::c_uchar,
                                           data: *const Struct_counter64,
                                           arg1: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_float(pkt: *mut *mut ::std::os::raw::c_uchar,
                                    pkt_len: *mut libc::size_t, offset: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    _type: ::std::os::raw::c_uchar,
                                    data: *const ::std::os::raw::c_float,
                                    data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_realloc_rbuild_double(pkt: *mut *mut ::std::os::raw::c_uchar,
                                     pkt_len: *mut libc::size_t,
                                     offset: *mut libc::size_t,
                                     allow_realloc: ::std::os::raw::c_int,
                                     _type: ::std::os::raw::c_uchar,
                                     data: *const ::std::os::raw::c_double,
                                     data_size: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmp_error(sess: *mut netsnmp_session,
                      clib_errorno: *mut ::std::os::raw::c_int,
                      snmp_errorno: *mut ::std::os::raw::c_int,
                      errstring: *mut *mut ::std::os::raw::c_char);
    pub fn snmp_sess_error(sess: *mut ::std::os::raw::c_void,
                           clib_errorno: *mut ::std::os::raw::c_int,
                           snmp_errorno: *mut ::std::os::raw::c_int,
                           errstring: *mut *mut ::std::os::raw::c_char);
    pub fn snmp_api_errstring(snmp_errorno: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn snmp_errstring(snmp_errorno: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn snmp_perror(msg: *const ::std::os::raw::c_char);
    pub fn snmp_sess_perror(msg: *const ::std::os::raw::c_char,
                            sess: *mut netsnmp_session);
    pub fn snmp_log_perror(msg: *const ::std::os::raw::c_char);
    pub fn snmp_log(priority: ::std::os::raw::c_int,
                    format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    // pub fn snmp_vlog(priority: ::std::os::raw::c_int,
    //                  format: *const ::std::os::raw::c_char, ap: va_list)
     // -> ::std::os::raw::c_int;
    pub fn snmp_get_do_logging() -> ::std::os::raw::c_int;
    pub fn netsnmp_logging_restart();
    pub fn snmp_disable_log();
    pub fn shutdown_snmp_logging();
    pub fn debugmsg(token: *const ::std::os::raw::c_char,
                    format: *const ::std::os::raw::c_char, ...);
    pub fn debugmsgtoken(token: *const ::std::os::raw::c_char,
                         format: *const ::std::os::raw::c_char, ...);
    pub fn debug_combo_nc(token: *const ::std::os::raw::c_char,
                          format: *const ::std::os::raw::c_char, ...);
    pub fn debugmsg_oid(token: *const ::std::os::raw::c_char,
                        theoid: *const oid, len: libc::size_t);
    pub fn debugmsg_suboid(token: *const ::std::os::raw::c_char,
                           theoid: *const oid, len: libc::size_t);
    pub fn debugmsg_var(token: *const ::std::os::raw::c_char,
                        var: *mut netsnmp_variable_list);
    pub fn debugmsg_oidrange(token: *const ::std::os::raw::c_char,
                             theoid: *const oid, len: libc::size_t,
                             var_subid: libc::size_t, range_ubound: oid);
    pub fn debugmsg_hex(token: *const ::std::os::raw::c_char,
                        thedata: *const ::std::os::raw::c_uchar, len: libc::size_t);
    pub fn debugmsg_hextli(token: *const ::std::os::raw::c_char,
                           thedata: *const ::std::os::raw::c_uchar, len: libc::size_t);
    pub fn debug_indent_add(amount: ::std::os::raw::c_int);
    pub fn debug_indent_get() -> ::std::os::raw::c_int;
    pub fn debug_indent() -> *const ::std::os::raw::c_char;
    pub fn snmp_debug_init();
    pub fn debug_register_tokens(tokens: *const ::std::os::raw::c_char);
    pub fn debug_is_token_registered(token: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snmp_set_do_debugging(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_do_debugging() -> ::std::os::raw::c_int;
    pub fn init_snmp_logging();
    pub fn snmp_disable_syslog();
    pub fn snmp_disable_filelog();
    pub fn snmp_disable_stderrlog();
    pub fn snmp_disable_calllog();
    pub fn snmp_enable_syslog();
    pub fn snmp_enable_syslog_ident(ident: *const ::std::os::raw::c_char,
                                    facility: ::std::os::raw::c_int);
    pub fn snmp_enable_filelog(logfilename: *const ::std::os::raw::c_char,
                               dont_zero_log: ::std::os::raw::c_int);
    pub fn snmp_enable_stderrlog();
    pub fn snmp_enable_calllog();
    pub fn snmp_stderrlog_status() -> ::std::os::raw::c_int;
    pub fn netsnmp_set_line_buffering(stream: *mut libc::FILE);
    pub fn snmp_log_options(optarg: *mut ::std::os::raw::c_char,
                            argc: ::std::os::raw::c_int,
                            argv: *const *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snmp_log_options_usage(lead: *const ::std::os::raw::c_char,
                                  outf: *mut libc::FILE);
    pub fn snmp_log_syslogname(syslogname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn log_handler_stdouterr(arg1: *mut netsnmp_log_handler,
                                 arg2: ::std::os::raw::c_int,
                                 arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn log_handler_file(arg1: *mut netsnmp_log_handler,
                            arg2: ::std::os::raw::c_int,
                            arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn log_handler_syslog(arg1: *mut netsnmp_log_handler,
                              arg2: ::std::os::raw::c_int,
                              arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn log_handler_callback(arg1: *mut netsnmp_log_handler,
                                arg2: ::std::os::raw::c_int,
                                arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn log_handler_null(arg1: *mut netsnmp_log_handler,
                            arg2: ::std::os::raw::c_int,
                            arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn get_logh_head() -> *mut netsnmp_log_handler;
    pub fn netsnmp_register_loghandler(_type: ::std::os::raw::c_int,
                                       pri: ::std::os::raw::c_int)
     -> *mut netsnmp_log_handler;
    pub fn netsnmp_find_loghandler(token: *const ::std::os::raw::c_char)
     -> *mut netsnmp_log_handler;
    pub fn netsnmp_add_loghandler(logh: *mut netsnmp_log_handler)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_remove_loghandler(logh: *mut netsnmp_log_handler)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_enable_loghandler(token: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_disable_loghandler(token: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_enable_this_loghandler(logh: *mut netsnmp_log_handler);
    pub fn netsnmp_disable_this_loghandler(logh: *mut netsnmp_log_handler);
    pub fn snmp_replace_var_types(vbl: *mut netsnmp_variable_list,
                                  old_type: ::std::os::raw::c_uchar, new_type: ::std::os::raw::c_uchar);
    pub fn snmp_reset_var_buffers(var: *mut netsnmp_variable_list);
    pub fn snmp_reset_var_types(vbl: *mut netsnmp_variable_list,
                                new_type: ::std::os::raw::c_uchar);
    pub fn count_varbinds(var_ptr: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn count_varbinds_of_type(var_ptr: *mut netsnmp_variable_list,
                                  _type: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
    pub fn find_varbind_of_type(var_ptr: *mut netsnmp_variable_list,
                                _type: ::std::os::raw::c_uchar) -> *mut netsnmp_variable_list;
    pub fn find_varbind_in_list(vblist: *mut netsnmp_variable_list,
                                name: *const oid, len: libc::size_t)
     -> *mut netsnmp_variable_list;
    pub fn snmp_split_pdu(arg1: *mut netsnmp_pdu,
                          skipCount: ::std::os::raw::c_int,
                          copyCount: ::std::os::raw::c_int)
     -> *mut netsnmp_pdu;
    pub fn snmp_varbind_len(pdu: *mut netsnmp_pdu) -> ::std::os::raw::c_ulong;
    pub fn snmp_clone_var(arg1: *mut netsnmp_variable_list,
                          arg2: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn snmp_synch_response_cb(arg1: *mut netsnmp_session,
                                  arg2: *mut netsnmp_pdu,
                                  arg3: *mut *mut netsnmp_pdu,
                                  arg4: snmp_callback)
     -> ::std::os::raw::c_int;
    pub fn snmp_clone_mem(arg1: *mut *mut ::std::os::raw::c_void,
                          arg2: *const ::std::os::raw::c_void,
                          arg3: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_query_set_default_session(arg1: *mut netsnmp_session);
    pub fn netsnmp_query_get_default_session_unchecked()
     -> *mut netsnmp_session;
    pub fn netsnmp_query_get_default_session() -> *mut netsnmp_session;
    pub fn netsnmp_query_get(arg1: *mut netsnmp_variable_list,
                             arg2: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_query_getnext(arg1: *mut netsnmp_variable_list,
                                 arg2: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_query_walk(arg1: *mut netsnmp_variable_list,
                              arg2: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_query_set(arg1: *mut netsnmp_variable_list,
                             arg2: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_state_machine_run(input: *mut netsnmp_state_machine_input)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_row_create(sess: *mut netsnmp_session,
                              vars: *mut netsnmp_variable_list,
                              row_status_index: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn add_mibdir(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_init_mib();
    pub fn shutdown_mib();
    pub fn netsnmp_read_module(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_tree;
    pub fn read_mib(arg1: *const ::std::os::raw::c_char) -> *mut Struct_tree;
    pub fn read_all_mibs() -> *mut Struct_tree;
    pub fn add_module_replacement(arg1: *const ::std::os::raw::c_char,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: ::std::os::raw::c_int);
    pub fn snmp_set_mib_warnings(arg1: ::std::os::raw::c_int);
    pub fn snmp_set_mib_errors(arg1: ::std::os::raw::c_int);
    pub fn snmp_set_save_descriptions(arg1: ::std::os::raw::c_int);
    pub fn read_objid(arg1: *const ::std::os::raw::c_char, arg2: *mut oid,
                      arg3: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmp_parse_oid(arg1: *const ::std::os::raw::c_char, arg2: *mut oid,
                          arg3: *mut libc::size_t) -> *mut oid;
    pub fn get_module_node(arg1: *const ::std::os::raw::c_char,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut oid, arg4: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn print_mib(arg1: *mut libc::FILE);
    pub fn print_objid(objid: *const oid, objidlen: libc::size_t);
    pub fn fprint_objid(fp: *mut libc::FILE, objid: *const oid, objidlen: libc::size_t);
    pub fn snprint_objid(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                         objid: *const oid, objidlen: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn print_description(objid: *mut oid, objidlen: libc::size_t,
                             width: ::std::os::raw::c_int);
    pub fn fprint_description(fp: *mut libc::FILE, objid: *mut oid,
                              objidlen: libc::size_t, width: ::std::os::raw::c_int);
    pub fn snprint_description(buf: *mut ::std::os::raw::c_char,
                               buf_len: libc::size_t, objid: *mut oid,
                               objidlen: libc::size_t, width: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_unload_module(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_init_mib_internals();
    pub fn unload_all_mibs();
    pub fn add_mibfile(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char, arg3: *mut libc::FILE)
     -> ::std::os::raw::c_int;
    pub fn which_module(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn module_name(arg1: ::std::os::raw::c_int,
                       arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn print_subtree(arg1: *mut libc::FILE, arg2: *mut Struct_tree,
                         arg3: ::std::os::raw::c_int);
    pub fn print_ascii_dump_tree(arg1: *mut libc::FILE, arg2: *mut Struct_tree,
                                 arg3: ::std::os::raw::c_int);
    pub fn find_tree_node(arg1: *const ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int) -> *mut Struct_tree;
    pub fn get_tc_descriptor(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn get_tc_description(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn find_best_tree_node(name: *const ::std::os::raw::c_char,
                               tree_top: *mut Struct_tree, _match: *mut ::std::os::raw::c_uint)
     -> *mut Struct_tree;
    pub fn find_node(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut Struct_tree) -> *mut Struct_tree;
    pub fn find_node2(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char)
     -> *mut Struct_tree;
    pub fn find_module(arg1: ::std::os::raw::c_int) -> *mut Struct_module;
    pub fn adopt_orphans();
    pub fn snmp_mib_toggle_options(options: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn snmp_mib_toggle_options_usage(lead: *const ::std::os::raw::c_char,
                                         outf: *mut libc::FILE);
    pub fn print_mib_tree(arg1: *mut libc::FILE, arg2: *mut Struct_tree,
                          arg3: ::std::os::raw::c_int);
    pub fn get_mib_parse_error_count() -> ::std::os::raw::c_int;
    pub fn snmp_get_token(fp: *mut libc::FILE, token: *mut ::std::os::raw::c_char,
                          maxtlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn init_callbacks();
    pub fn netsnmp_register_callback(major: ::std::os::raw::c_int,
                                     minor: ::std::os::raw::c_int,
                                     new_callback: *mut SNMPCallback,
                                     arg: *mut ::std::os::raw::c_void,
                                     priority: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_register_callback(major: ::std::os::raw::c_int,
                                  minor: ::std::os::raw::c_int,
                                  new_callback: *mut SNMPCallback,
                                  arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmp_call_callbacks(major: ::std::os::raw::c_int,
                               minor: ::std::os::raw::c_int,
                               caller_arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmp_callback_available(major: ::std::os::raw::c_int,
                                   minor: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_count_callbacks(major: ::std::os::raw::c_int,
                                minor: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_unregister_callback(major: ::std::os::raw::c_int,
                                    minor: ::std::os::raw::c_int,
                                    new_callback: *mut SNMPCallback,
                                    arg: *mut ::std::os::raw::c_void,
                                    matchargs: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn clear_callback();
    pub fn netsnmp_callback_clear_client_arg(arg1:
                                                 *mut ::std::os::raw::c_void,
                                             i: ::std::os::raw::c_int,
                                             j: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_callback_list(major: ::std::os::raw::c_int,
                              minor: ::std::os::raw::c_int)
     -> *mut Struct_snmp_gen_callback;
    pub fn netsnmp_oid_stash_add_data(root: *mut *mut netsnmp_oid_stash_node,
                                      lookup: *const oid, lookup_len: libc::size_t,
                                      mydata: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_stash_store_all(arg1: ::std::os::raw::c_int,
                                       arg2: ::std::os::raw::c_int,
                                       arg3: *mut ::std::os::raw::c_void,
                                       arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_stash_get_node(root: *mut netsnmp_oid_stash_node,
                                      lookup: *const oid, lookup_len: libc::size_t)
     -> *mut netsnmp_oid_stash_node;
    pub fn netsnmp_oid_stash_get_data(root: *mut netsnmp_oid_stash_node,
                                      lookup: *const oid, lookup_len: libc::size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn netsnmp_oid_stash_getnext_node(root: *mut netsnmp_oid_stash_node,
                                          lookup: *mut oid,
                                          lookup_len: libc::size_t)
     -> *mut netsnmp_oid_stash_node;
    pub fn netsnmp_oid_stash_create_sized_node(mysize: libc::size_t)
     -> *mut netsnmp_oid_stash_node;
    pub fn netsnmp_oid_stash_create_node() -> *mut netsnmp_oid_stash_node;
    pub fn netsnmp_oid_stash_store(root: *mut netsnmp_oid_stash_node,
                                   tokenname: *const ::std::os::raw::c_char,
                                   dumpfn: *mut NetSNMPStashDump,
                                   curoid: *mut oid, curoid_len: libc::size_t);
    pub fn netsnmp_oid_stash_free(root: *mut *mut netsnmp_oid_stash_node,
                                  freefn: *mut NetSNMPStashFreeNode);
    pub fn netsnmp_oid_stash_no_free(arg1: *mut ::std::os::raw::c_void);
    pub fn snmp_set_dump_packet(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_dump_packet() -> ::std::os::raw::c_int;
    pub fn snmp_set_quick_print(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_quick_print() -> ::std::os::raw::c_int;
    pub fn snmp_set_suffix_only(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_suffix_only() -> ::std::os::raw::c_int;
    pub fn snmp_set_full_objid(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_full_objid() -> ::std::os::raw::c_int;
    pub fn snmp_set_random_access(arg1: ::std::os::raw::c_int);
    pub fn snmp_get_random_access() -> ::std::os::raw::c_int;
    pub fn snmp_set_mib_comment_term(arg1: ::std::os::raw::c_int);
    pub fn snmp_set_mib_parse_label(arg1: ::std::os::raw::c_int);
    pub fn print_ascii_dump(arg1: *mut libc::FILE);
    pub fn register_mib_handlers();
    pub fn netsnmp_set_mib_directory(dir: *const ::std::os::raw::c_char);
    pub fn netsnmp_get_mib_directory() -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_fixup_mib_directory();
    pub fn netsnmp_mibindex_load();
    pub fn netsnmp_mibindex_lookup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_mibindex_new(arg1: *const ::std::os::raw::c_char)
     -> *mut libc::FILE;
    pub fn sprint_realloc_description(buf: *mut *mut ::std::os::raw::c_uchar,
                                      buf_len: *mut libc::size_t,
                                      out_len: *mut libc::size_t,
                                      allow_realloc: ::std::os::raw::c_int,
                                      objid: *mut oid, objidlen: libc::size_t,
                                      width: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn get_wild_node(arg1: *const ::std::os::raw::c_char, arg2: *mut oid,
                         arg3: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn get_node(arg1: *const ::std::os::raw::c_char, arg2: *mut oid,
                    arg3: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn get_tree(arg1: *const oid, arg2: libc::size_t, arg3: *mut Struct_tree)
     -> *mut Struct_tree;
    pub fn get_tree_head() -> *mut Struct_tree;
    pub fn set_function(arg1: *mut Struct_tree);
    pub fn parse_one_oid_index(oidStart: *mut *mut oid, oidLen: *mut libc::size_t,
                               data: *mut netsnmp_variable_list,
                               complete: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn parse_oid_indexes(oidIndex: *mut oid, oidLen: libc::size_t,
                             data: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn build_oid_noalloc(_in: *mut oid, in_len: libc::size_t,
                             out_len: *mut libc::size_t, prefix: *mut oid,
                             prefix_len: libc::size_t,
                             indexes: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn build_oid(out: *mut *mut oid, out_len: *mut libc::size_t,
                     prefix: *mut oid, prefix_len: libc::size_t,
                     indexes: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn build_oid_segment(var: *mut netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_variable(buf: *mut *mut ::std::os::raw::c_uchar,
                                   buf_len: *mut libc::size_t, out_len: *mut libc::size_t,
                                   allow_realloc: ::std::os::raw::c_int,
                                   objid: *const oid, objidlen: libc::size_t,
                                   variable: *const netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_sprint_realloc_objid_tree(buf: *mut *mut ::std::os::raw::c_uchar,
                                             buf_len: *mut libc::size_t,
                                             out_len: *mut libc::size_t,
                                             allow_realloc:
                                                 ::std::os::raw::c_int,
                                             buf_overflow:
                                                 *mut ::std::os::raw::c_int,
                                             objid: *const oid,
                                             objidlen: libc::size_t)
     -> *mut Struct_tree;
    pub fn netsnmp_sprint_realloc_objid(buf: *mut *mut ::std::os::raw::c_uchar,
                                        buf_len: *mut libc::size_t,
                                        out_len: *mut libc::size_t,
                                        allow_realloc: ::std::os::raw::c_int,
                                        buf_overflow:
                                            *mut ::std::os::raw::c_int,
                                        objid: *const oid, objidlen: libc::size_t);
    pub fn sprint_realloc_value(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                out_len: *mut libc::size_t,
                                allow_realloc: ::std::os::raw::c_int,
                                objid: *const oid, objidlen: libc::size_t,
                                variable: *const netsnmp_variable_list)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_objid(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                out_len: *mut libc::size_t,
                                allow_realloc: ::std::os::raw::c_int,
                                objid: *const oid, objidlen: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_by_type(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                  out_len: *mut libc::size_t,
                                  allow_realloc: ::std::os::raw::c_int,
                                  var: *const netsnmp_variable_list,
                                  enums: *const Struct_enum_list,
                                  hint: *const ::std::os::raw::c_char,
                                  units: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_hexstring(buf: *mut *mut ::std::os::raw::c_uchar,
                                    buf_len: *mut libc::size_t,
                                    out_len: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    arg1: *const ::std::os::raw::c_uchar, arg2: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_asciistring(buf: *mut *mut ::std::os::raw::c_uchar,
                                      buf_len: *mut libc::size_t,
                                      out_len: *mut libc::size_t,
                                      allow_realloc: ::std::os::raw::c_int,
                                      cp: *const ::std::os::raw::c_uchar, len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_octet_string(buf: *mut *mut ::std::os::raw::c_uchar,
                                       buf_len: *mut libc::size_t,
                                       out_len: *mut libc::size_t,
                                       allow_realloc: ::std::os::raw::c_int,
                                       arg1: *const netsnmp_variable_list,
                                       arg2: *const Struct_enum_list,
                                       arg3: *const ::std::os::raw::c_char,
                                       arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_opaque(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                 out_len: *mut libc::size_t,
                                 allow_realloc: ::std::os::raw::c_int,
                                 arg1: *const netsnmp_variable_list,
                                 arg2: *const Struct_enum_list,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_object_identifier(buf: *mut *mut ::std::os::raw::c_uchar,
                                            buf_len: *mut libc::size_t,
                                            out_len: *mut libc::size_t,
                                            allow_realloc:
                                                ::std::os::raw::c_int,
                                            arg1:
                                                *const netsnmp_variable_list,
                                            arg2: *const Struct_enum_list,
                                            arg3:
                                                *const ::std::os::raw::c_char,
                                            arg4:
                                                *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_timeticks(buf: *mut *mut ::std::os::raw::c_uchar,
                                    buf_len: *mut libc::size_t,
                                    out_len: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    arg1: *const netsnmp_variable_list,
                                    arg2: *const Struct_enum_list,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_hinted_integer(buf: *mut *mut ::std::os::raw::c_uchar,
                                         buf_len: *mut libc::size_t,
                                         out_len: *mut libc::size_t,
                                         allow_realloc: ::std::os::raw::c_int,
                                         arg1: ::std::os::raw::c_long,
                                         arg2: ::std::os::raw::c_char,
                                         arg3: *const ::std::os::raw::c_char,
                                         arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_integer(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                  out_len: *mut libc::size_t,
                                  allow_realloc: ::std::os::raw::c_int,
                                  arg1: *const netsnmp_variable_list,
                                  arg2: *const Struct_enum_list,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_uinteger(buf: *mut *mut ::std::os::raw::c_uchar,
                                   buf_len: *mut libc::size_t, out_len: *mut libc::size_t,
                                   allow_realloc: ::std::os::raw::c_int,
                                   arg1: *const netsnmp_variable_list,
                                   arg2: *const Struct_enum_list,
                                   arg3: *const ::std::os::raw::c_char,
                                   arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_gauge(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                out_len: *mut libc::size_t,
                                allow_realloc: ::std::os::raw::c_int,
                                arg1: *const netsnmp_variable_list,
                                arg2: *const Struct_enum_list,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_counter(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                  out_len: *mut libc::size_t,
                                  allow_realloc: ::std::os::raw::c_int,
                                  arg1: *const netsnmp_variable_list,
                                  arg2: *const Struct_enum_list,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_networkaddress(buf: *mut *mut ::std::os::raw::c_uchar,
                                         buf_len: *mut libc::size_t,
                                         out_len: *mut libc::size_t,
                                         allow_realloc: ::std::os::raw::c_int,
                                         arg1: *const netsnmp_variable_list,
                                         arg2: *const Struct_enum_list,
                                         arg3: *const ::std::os::raw::c_char,
                                         arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_ipaddress(buf: *mut *mut ::std::os::raw::c_uchar,
                                    buf_len: *mut libc::size_t,
                                    out_len: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    arg1: *const netsnmp_variable_list,
                                    arg2: *const Struct_enum_list,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_null(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                               out_len: *mut libc::size_t,
                               allow_realloc: ::std::os::raw::c_int,
                               arg1: *const netsnmp_variable_list,
                               arg2: *const Struct_enum_list,
                               arg3: *const ::std::os::raw::c_char,
                               arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_bitstring(buf: *mut *mut ::std::os::raw::c_uchar,
                                    buf_len: *mut libc::size_t,
                                    out_len: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    arg1: *const netsnmp_variable_list,
                                    arg2: *const Struct_enum_list,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_nsapaddress(buf: *mut *mut ::std::os::raw::c_uchar,
                                      buf_len: *mut libc::size_t,
                                      out_len: *mut libc::size_t,
                                      allow_realloc: ::std::os::raw::c_int,
                                      arg1: *const netsnmp_variable_list,
                                      arg2: *const Struct_enum_list,
                                      arg3: *const ::std::os::raw::c_char,
                                      arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_counter64(buf: *mut *mut ::std::os::raw::c_uchar,
                                    buf_len: *mut libc::size_t,
                                    out_len: *mut libc::size_t,
                                    allow_realloc: ::std::os::raw::c_int,
                                    arg1: *const netsnmp_variable_list,
                                    arg2: *const Struct_enum_list,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_badtype(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                  out_len: *mut libc::size_t,
                                  allow_realloc: ::std::os::raw::c_int,
                                  arg1: *const netsnmp_variable_list,
                                  arg2: *const Struct_enum_list,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_float(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                out_len: *mut libc::size_t,
                                allow_realloc: ::std::os::raw::c_int,
                                arg1: *const netsnmp_variable_list,
                                arg2: *const Struct_enum_list,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn sprint_realloc_double(buf: *mut *mut ::std::os::raw::c_uchar, buf_len: *mut libc::size_t,
                                 out_len: *mut libc::size_t,
                                 allow_realloc: ::std::os::raw::c_int,
                                 arg1: *const netsnmp_variable_list,
                                 arg2: *const Struct_enum_list,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_by_type(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                           var: *mut netsnmp_variable_list,
                           enums: *const Struct_enum_list,
                           hint: *const ::std::os::raw::c_char,
                           units: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_hexstring(buf: *mut ::std::os::raw::c_char,
                             buf_len: libc::size_t, arg1: *const ::std::os::raw::c_uchar,
                             arg2: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snprint_asciistring(buf: *mut ::std::os::raw::c_char,
                               buf_len: libc::size_t, cp: *const ::std::os::raw::c_uchar,
                               len: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snprint_octet_string(buf: *mut ::std::os::raw::c_char,
                                buf_len: libc::size_t,
                                arg1: *const netsnmp_variable_list,
                                arg2: *const Struct_enum_list,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_opaque(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                          arg1: *const netsnmp_variable_list,
                          arg2: *const Struct_enum_list,
                          arg3: *const ::std::os::raw::c_char,
                          arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_object_identifier(buf: *mut ::std::os::raw::c_char,
                                     buf_len: libc::size_t,
                                     arg1: *const netsnmp_variable_list,
                                     arg2: *const Struct_enum_list,
                                     arg3: *const ::std::os::raw::c_char,
                                     arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_timeticks(buf: *mut ::std::os::raw::c_char,
                             buf_len: libc::size_t,
                             arg1: *const netsnmp_variable_list,
                             arg2: *const Struct_enum_list,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_hinted_integer(buf: *mut ::std::os::raw::c_char,
                                  buf_len: libc::size_t,
                                  arg1: ::std::os::raw::c_long,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_integer(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                           arg1: *const netsnmp_variable_list,
                           arg2: *const Struct_enum_list,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_uinteger(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                            arg1: *const netsnmp_variable_list,
                            arg2: *const Struct_enum_list,
                            arg3: *const ::std::os::raw::c_char,
                            arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_gauge(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                         arg1: *const netsnmp_variable_list,
                         arg2: *const Struct_enum_list,
                         arg3: *const ::std::os::raw::c_char,
                         arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_counter(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                           arg1: *const netsnmp_variable_list,
                           arg2: *const Struct_enum_list,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_networkaddress(buf: *mut ::std::os::raw::c_char,
                                  buf_len: libc::size_t,
                                  arg1: *const netsnmp_variable_list,
                                  arg2: *const Struct_enum_list,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_ipaddress(buf: *mut ::std::os::raw::c_char,
                             buf_len: libc::size_t,
                             arg1: *const netsnmp_variable_list,
                             arg2: *const Struct_enum_list,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_null(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                        arg1: *const netsnmp_variable_list,
                        arg2: *const Struct_enum_list,
                        arg3: *const ::std::os::raw::c_char,
                        arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_bitstring(buf: *mut ::std::os::raw::c_char,
                             buf_len: libc::size_t,
                             arg1: *const netsnmp_variable_list,
                             arg2: *const Struct_enum_list,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_nsapaddress(buf: *mut ::std::os::raw::c_char,
                               buf_len: libc::size_t,
                               arg1: *const netsnmp_variable_list,
                               arg2: *const Struct_enum_list,
                               arg3: *const ::std::os::raw::c_char,
                               arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_counter64(buf: *mut ::std::os::raw::c_char,
                             buf_len: libc::size_t,
                             arg1: *const netsnmp_variable_list,
                             arg2: *const Struct_enum_list,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_badtype(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                           arg1: *const netsnmp_variable_list,
                           arg2: *const Struct_enum_list,
                           arg3: *const ::std::os::raw::c_char,
                           arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_float(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                         arg1: *const netsnmp_variable_list,
                         arg2: *const Struct_enum_list,
                         arg3: *const ::std::os::raw::c_char,
                         arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snprint_double(buf: *mut ::std::os::raw::c_char, buf_len: libc::size_t,
                          arg1: *const netsnmp_variable_list,
                          arg2: *const Struct_enum_list,
                          arg3: *const ::std::os::raw::c_char,
                          arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn print_oid_report(arg1: *mut libc::FILE);
    pub fn print_oid_report_enable_labeledoid();
    pub fn print_oid_report_enable_oid();
    pub fn print_oid_report_enable_suffix();
    pub fn print_oid_report_enable_symbolic();
    pub fn print_oid_report_enable_mibchildoid();
    pub fn parse_octet_hint(hint: *const ::std::os::raw::c_char,
                            value: *const ::std::os::raw::c_char,
                            new_val: *mut *mut ::std::os::raw::c_uchar,
                            new_val_len: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn clear_tree_flags(tp: *mut Struct_tree);
    pub fn snmp_out_toggle_options(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn snmp_out_toggle_options_usage(arg1: *const ::std::os::raw::c_char,
                                         arg2: *mut libc::FILE);
    pub fn snmp_in_toggle_options(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn snmp_in_options(arg1: *mut ::std::os::raw::c_char,
                           arg2: ::std::os::raw::c_int,
                           arg3: *const *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn snmp_in_toggle_options_usage(arg1: *const ::std::os::raw::c_char,
                                        arg2: *mut libc::FILE);
    pub fn mib_to_asn_type(mib_type: ::std::os::raw::c_int) -> ::std::os::raw::c_uchar;
    pub fn netsnmp_str2oid(S: *const ::std::os::raw::c_char, O: *mut oid,
                           L: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn snmp_set_detail(arg1: *const ::std::os::raw::c_char);
    pub fn netsnmp_malloc(size: libc::size_t) -> *mut ::std::os::raw::c_void;
    pub fn netsnmp_calloc(nelem: libc::size_t, elsize: libc::size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn netsnmp_realloc(ptr: *mut ::std::os::raw::c_void, size: libc::size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn netsnmp_free(ptr: *mut ::std::os::raw::c_void);
    pub fn netsnmp_strdup(s1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn snmp_free_var_internals(arg1: *mut netsnmp_variable_list);
    pub fn snmp_get_next_msgid() -> ::std::os::raw::c_long;
    pub fn snmp_get_next_reqid() -> ::std::os::raw::c_long;
    pub fn snmp_get_next_sessid() -> ::std::os::raw::c_long;
    pub fn snmp_get_next_transid() -> ::std::os::raw::c_long;
    pub fn snmp_oid_compare(arg1: *const oid, arg2: libc::size_t, arg3: *const oid,
                            arg4: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmp_oid_ncompare(arg1: *const oid, arg2: libc::size_t, arg3: *const oid,
                             arg4: libc::size_t, arg5: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmp_oidtree_compare(arg1: *const oid, arg2: libc::size_t,
                                arg3: *const oid, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmp_oidsubtree_compare(arg1: *const oid, arg2: libc::size_t,
                                   arg3: *const oid, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_compare_ll(in_name1: *const oid, len1: libc::size_t,
                                  in_name2: *const oid, len2: libc::size_t,
                                  offpt: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_equals(arg1: *const oid, arg2: libc::size_t,
                              arg3: *const oid, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_tree_equals(arg1: *const oid, arg2: libc::size_t,
                                   arg3: *const oid, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_is_subtree(arg1: *const oid, arg2: libc::size_t,
                                  arg3: *const oid, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_oid_find_prefix(in_name1: *const oid, len1: libc::size_t,
                                   in_name2: *const oid, len2: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn init_snmp(arg1: *const ::std::os::raw::c_char);
    pub fn snmp_pdu_build(arg1: *mut netsnmp_pdu, arg2: *mut ::std::os::raw::c_uchar,
                          arg3: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn snmp_pdu_rbuild(arg1: *mut netsnmp_pdu, arg2: *mut ::std::os::raw::c_uchar,
                           arg3: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn snmpv3_parse(arg1: *mut netsnmp_pdu, arg2: *mut ::std::os::raw::c_uchar,
                        arg3: *mut libc::size_t, arg4: *mut *mut ::std::os::raw::c_uchar,
                        arg5: *mut netsnmp_session) -> ::std::os::raw::c_int;
    pub fn snmpv3_packet_build(arg1: *mut netsnmp_session,
                               pdu: *mut netsnmp_pdu, packet: *mut ::std::os::raw::c_uchar,
                               out_length: *mut libc::size_t, pdu_data: *mut ::std::os::raw::c_uchar,
                               pdu_data_len: libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmpv3_packet_rbuild(arg1: *mut netsnmp_session,
                                pdu: *mut netsnmp_pdu, packet: *mut ::std::os::raw::c_uchar,
                                out_length: *mut libc::size_t,
                                pdu_data: *mut ::std::os::raw::c_uchar, pdu_data_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_make_report(pdu: *mut netsnmp_pdu,
                              error: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_get_report_type(pdu: *mut netsnmp_pdu)
     -> ::std::os::raw::c_int;
    pub fn snmp_pdu_parse(pdu: *mut netsnmp_pdu, data: *mut ::std::os::raw::c_uchar,
                          length: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn snmpv3_scopedPDU_parse(pdu: *mut netsnmp_pdu, cp: *mut ::std::os::raw::c_uchar,
                                  length: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn snmp_store_needed(_type: *const ::std::os::raw::c_char);
    pub fn snmp_store_if_needed();
    pub fn snmp_store(_type: *const ::std::os::raw::c_char);
    pub fn snmp_shutdown(_type: *const ::std::os::raw::c_char);
    pub fn snmp_add_var(arg1: *mut netsnmp_pdu, arg2: *const oid,
                        arg3: libc::size_t, arg4: ::std::os::raw::c_char,
                        arg5: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn snmp_duplicate_objid(objToCopy: *const oid, arg1: libc::size_t)
     -> *mut oid;
    pub fn snmp_increment_statistic(which: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn snmp_increment_statistic_by(which: ::std::os::raw::c_int,
                                       count: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn snmp_get_statistic(which: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn snmp_init_statistics();
    pub fn create_user_from_session(session: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn snmp_get_fd_for_session(sessp: *mut Struct_snmp_session)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_probe_contextEngineID_rfc5343(slp:
                                                    *mut ::std::os::raw::c_void,
                                                session: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_packet_realloc_rbuild(pkt: *mut *mut ::std::os::raw::c_uchar,
                                        pkt_len: *mut libc::size_t,
                                        offset: *mut libc::size_t,
                                        session: *mut netsnmp_session,
                                        pdu: *mut netsnmp_pdu,
                                        pdu_data: *mut ::std::os::raw::c_uchar,
                                        pdu_data_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmp_pdu_realloc_rbuild(pkt: *mut *mut ::std::os::raw::c_uchar,
                                   pkt_len: *mut libc::size_t, offset: *mut libc::size_t,
                                   pdu: *mut netsnmp_pdu)
     -> ::std::os::raw::c_int;
    pub fn snmp_open_ex(arg1: *mut netsnmp_session,
                        fpre_parse:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut netsnmp_session,
                                                                       arg2:
                                                                           *mut Struct_netsnmp_transport_s,
                                                                       arg3:
                                                                           *mut ::std::os::raw::c_void,
                                                                       arg4:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        fparse:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut netsnmp_session,
                                                                       arg2:
                                                                           *mut netsnmp_pdu,
                                                                       arg3:
                                                                           *mut ::std::os::raw::c_uchar,
                                                                       arg4:
                                                                           libc::size_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        fpost_parse:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut netsnmp_session,
                                                                       arg2:
                                                                           *mut netsnmp_pdu,
                                                                       arg3:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        fbuild:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut netsnmp_session,
                                                                       arg2:
                                                                           *mut netsnmp_pdu,
                                                                       arg3:
                                                                           *mut ::std::os::raw::c_uchar,
                                                                       arg4:
                                                                           *mut libc::size_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        frbuild:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut netsnmp_session,
                                                                       arg2:
                                                                           *mut netsnmp_pdu,
                                                                       arg3:
                                                                           *mut *mut ::std::os::raw::c_uchar,
                                                                       arg4:
                                                                           *mut libc::size_t,
                                                                       arg5:
                                                                           *mut libc::size_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        fcheck:
                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut ::std::os::raw::c_uchar,
                                                                       arg2:
                                                                           libc::size_t)
                                                      ->
                                                          ::std::os::raw::c_int>)
     -> *mut netsnmp_session;
    pub fn netsnmp_sess_log_error(priority: ::std::os::raw::c_int,
                                  prog_string: *const ::std::os::raw::c_char,
                                  ss: *mut netsnmp_session);
    pub fn snmp_pdu_type(_type: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn snmp_sess_transport(arg1: *mut ::std::os::raw::c_void)
     -> *mut Struct_netsnmp_transport_s;
    pub fn snmp_sess_transport_set(arg1: *mut ::std::os::raw::c_void,
                                   arg2: *mut Struct_netsnmp_transport_s);
    pub fn netsnmp_sess_config_transport(transport_configuration:
                                             *mut Struct_netsnmp_container_s,
                                         transport:
                                             *mut Struct_netsnmp_transport_s)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_sess_config_and_open_transport(in_session:
                                                      *mut netsnmp_session,
                                                  transport:
                                                      *mut Struct_netsnmp_transport_s)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_add_ex(arg1: *mut netsnmp_session,
                            arg2: *mut Struct_netsnmp_transport_s,
                            fpre_parse:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut netsnmp_session,
                                                                           arg2:
                                                                               *mut Struct_netsnmp_transport_s,
                                                                           arg3:
                                                                               *mut ::std::os::raw::c_void,
                                                                           arg4:
                                                                               ::std::os::raw::c_int)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            fparse:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut netsnmp_session,
                                                                           arg2:
                                                                               *mut Struct_snmp_pdu,
                                                                           arg3:
                                                                               *mut ::std::os::raw::c_uchar,
                                                                           arg4:
                                                                               libc::size_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            fpost_parse:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut netsnmp_session,
                                                                           arg2:
                                                                               *mut Struct_snmp_pdu,
                                                                           arg3:
                                                                               ::std::os::raw::c_int)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            fbuild:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut netsnmp_session,
                                                                           arg2:
                                                                               *mut Struct_snmp_pdu,
                                                                           arg3:
                                                                               *mut ::std::os::raw::c_uchar,
                                                                           arg4:
                                                                               *mut libc::size_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            frbuild:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut netsnmp_session,
                                                                           arg2:
                                                                               *mut Struct_snmp_pdu,
                                                                           arg3:
                                                                               *mut *mut ::std::os::raw::c_uchar,
                                                                           arg4:
                                                                               *mut libc::size_t,
                                                                           arg5:
                                                                               *mut libc::size_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            fcheck:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut ::std::os::raw::c_uchar,
                                                                           arg2:
                                                                               libc::size_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
                            fcreate_pdu:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut Struct_netsnmp_transport_s,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void,
                                                                           arg3:
                                                                               libc::size_t)
                                                          ->
                                                              *mut netsnmp_pdu>)
     -> *mut ::std::os::raw::c_void;
    pub fn snmp_sess_add(arg1: *mut netsnmp_session,
                         arg2: *mut Struct_netsnmp_transport_s,
                         fpre_parse:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut Struct_netsnmp_transport_s,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg4:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fpost_parse:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut netsnmp_pdu,
                                                                        arg3:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn snmp_add(arg1: *mut netsnmp_session,
                    arg2: *mut Struct_netsnmp_transport_s,
                    fpre_parse:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut netsnmp_session,
                                                                   arg2:
                                                                       *mut Struct_netsnmp_transport_s,
                                                                   arg3:
                                                                       *mut ::std::os::raw::c_void,
                                                                   arg4:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
                    fpost_parse:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut netsnmp_session,
                                                                   arg2:
                                                                       *mut netsnmp_pdu,
                                                                   arg3:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>)
     -> *mut netsnmp_session;
    pub fn snmp_add_full(in_session: *mut netsnmp_session,
                         transport: *mut Struct_netsnmp_transport_s,
                         fpre_parse:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut Struct_netsnmp_transport_s,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg4:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fparse:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut netsnmp_pdu,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_uchar,
                                                                        arg4:
                                                                            libc::size_t)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fpost_parse:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut netsnmp_pdu,
                                                                        arg3:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fbuild:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut netsnmp_pdu,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_uchar,
                                                                        arg4:
                                                                            *mut libc::size_t)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         frbuild:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut netsnmp_session,
                                                                        arg2:
                                                                            *mut netsnmp_pdu,
                                                                        arg3:
                                                                            *mut *mut ::std::os::raw::c_uchar,
                                                                        arg4:
                                                                            *mut libc::size_t,
                                                                        arg5:
                                                                            *mut libc::size_t)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fcheck:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut ::std::os::raw::c_uchar,
                                                                        arg2:
                                                                            libc::size_t)
                                                       ->
                                                           ::std::os::raw::c_int>,
                         fcreate_pdu:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut Struct_netsnmp_transport_s,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg3:
                                                                            libc::size_t)
                                                       -> *mut netsnmp_pdu>)
     -> *mut netsnmp_session;
    pub fn snmp_comstr_parse(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                             arg3: *mut ::std::os::raw::c_uchar, arg4: *mut libc::size_t,
                             arg5: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_uchar;
    pub fn snmp_comstr_build(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                             arg3: *mut ::std::os::raw::c_uchar, arg4: *mut libc::size_t,
                             arg5: *mut ::std::os::raw::c_long, arg6: libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn has_access(arg1: ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn uptime_string(arg1: ::std::os::raw::c_ulong, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn uptime_string_n(arg1: ::std::os::raw::c_ulong, arg2: *mut ::std::os::raw::c_char,
                           arg3: libc::size_t) -> *mut ::std::os::raw::c_char;
    pub fn xdump(arg1: *const ::std::os::raw::c_void, arg2: libc::size_t,
                 arg3: *const ::std::os::raw::c_char);
    pub fn snmp_parse_var_op(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut oid,
                             arg3: *mut libc::size_t, arg4: *mut ::std::os::raw::c_uchar,
                             arg5: *mut libc::size_t, arg6: *mut *mut ::std::os::raw::c_uchar,
                             arg7: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn snmp_build_var_op(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut oid,
                             arg3: *mut libc::size_t, arg4: ::std::os::raw::c_uchar, arg5: libc::size_t,
                             arg6: *mut ::std::os::raw::c_uchar, arg7: *mut libc::size_t)
     -> *mut ::std::os::raw::c_uchar;
    pub fn snmp_realloc_rbuild_var_op(pkt: *mut *mut ::std::os::raw::c_uchar,
                                      pkt_len: *mut libc::size_t,
                                      offset: *mut libc::size_t,
                                      allow_realloc: ::std::os::raw::c_int,
                                      name: *const oid, name_len: *mut libc::size_t,
                                      value_type: ::std::os::raw::c_uchar, value: *mut ::std::os::raw::c_uchar,
                                      value_length: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_dateandtime_set_buf_from_vars(buf: *mut ::std::os::raw::c_uchar,
                                                 bufsize: *mut libc::size_t,
                                                 y: ::std::os::raw::c_ushort, mon: ::std::os::raw::c_uchar,
                                                 d: ::std::os::raw::c_uchar, h: ::std::os::raw::c_uchar,
                                                 min: ::std::os::raw::c_uchar, s: ::std::os::raw::c_uchar,
                                                 deci_seconds: ::std::os::raw::c_uchar,
                                                 utc_offset_direction:
                                                     ::std::os::raw::c_int,
                                                 utc_offset_hours: ::std::os::raw::c_uchar,
                                                 utc_offset_minutes: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn date_n_time(arg1: *const libc::time_t, arg2: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn ctime_to_timet(arg1: *const ::std::os::raw::c_char) -> libc::time_t;
    pub fn check_rowstatus_transition(old_val: ::std::os::raw::c_int,
                                      new_val: ::std::os::raw::c_int)
     -> ::std::os::raw::c_char;
    pub fn check_rowstatus_with_storagetype_transition(old_val:
                                                           ::std::os::raw::c_int,
                                                       new_val:
                                                           ::std::os::raw::c_int,
                                                       old_storage:
                                                           ::std::os::raw::c_int)
     -> ::std::os::raw::c_char;
    pub fn check_storage_transition(old_val: ::std::os::raw::c_int,
                                    new_val: ::std::os::raw::c_int)
     -> ::std::os::raw::c_char;
    pub fn snmp_sess_init(arg1: *mut netsnmp_session);
    pub fn snmp_open(arg1: *mut netsnmp_session) -> *mut netsnmp_session;
    pub fn snmp_close(arg1: *mut netsnmp_session) -> ::std::os::raw::c_int;
    pub fn snmp_close_sessions() -> ::std::os::raw::c_int;
    pub fn snmp_send(arg1: *mut netsnmp_session, arg2: *mut netsnmp_pdu)
     -> ::std::os::raw::c_int;
    pub fn snmp_async_send(arg1: *mut netsnmp_session, arg2: *mut netsnmp_pdu,
                           arg3: netsnmp_callback,
                           arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmp_read(arg1: *mut libc::fd_set);
    pub fn snmp_read2(arg1: *mut netsnmp_large_fd_set);
    pub fn snmp_synch_response(arg1: *mut netsnmp_session,
                               arg2: *mut netsnmp_pdu,
                               arg3: *mut *mut netsnmp_pdu)
     -> ::std::os::raw::c_int;
    pub fn snmp_select_info(arg1: *mut ::std::os::raw::c_int,
                            arg2: *mut libc::fd_set, arg3: *mut libc::timeval,
                            arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_select_info2(arg1: *mut ::std::os::raw::c_int,
                             arg2: *mut netsnmp_large_fd_set,
                             arg3: *mut libc::timeval,
                             arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_select_info_flags(arg1: *mut ::std::os::raw::c_void,
                                       arg2: *mut ::std::os::raw::c_int,
                                       arg3: *mut libc::fd_set,
                                       arg4: *mut libc::timeval,
                                       arg5: *mut ::std::os::raw::c_int,
                                       arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_select_info2_flags(arg1: *mut ::std::os::raw::c_void,
                                        arg2: *mut ::std::os::raw::c_int,
                                        arg3: *mut netsnmp_large_fd_set,
                                        arg4: *mut libc::timeval,
                                        arg5: *mut ::std::os::raw::c_int,
                                        arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_timeout();
    pub fn snmp_sess_open(arg1: *mut netsnmp_session)
     -> *mut ::std::os::raw::c_void;
    pub fn snmp_sess_pointer(arg1: *mut netsnmp_session)
     -> *mut ::std::os::raw::c_void;
    pub fn snmp_sess_session(arg1: *mut ::std::os::raw::c_void)
     -> *mut netsnmp_session;
    pub fn snmp_sess_session_lookup(arg1: *mut ::std::os::raw::c_void)
     -> *mut netsnmp_session;
    pub fn snmp_sess_send(arg1: *mut ::std::os::raw::c_void,
                          arg2: *mut netsnmp_pdu) -> ::std::os::raw::c_int;
    pub fn snmp_sess_async_send(arg1: *mut ::std::os::raw::c_void,
                                arg2: *mut netsnmp_pdu,
                                arg3: netsnmp_callback,
                                arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_select_info(arg1: *mut ::std::os::raw::c_void,
                                 arg2: *mut ::std::os::raw::c_int,
                                 arg3: *mut libc::fd_set, arg4: *mut libc::timeval,
                                 arg5: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_select_info2(arg1: *mut ::std::os::raw::c_void,
                                  arg2: *mut ::std::os::raw::c_int,
                                  arg3: *mut netsnmp_large_fd_set,
                                  arg4: *mut libc::timeval,
                                  arg5: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_read(arg1: *mut ::std::os::raw::c_void,
                          arg2: *mut libc::fd_set) -> ::std::os::raw::c_int;
    pub fn snmp_sess_read2(arg1: *mut ::std::os::raw::c_void,
                           arg2: *mut netsnmp_large_fd_set)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_timeout(arg1: *mut ::std::os::raw::c_void);
    pub fn snmp_sess_close(arg1: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmp_sess_synch_response(arg1: *mut ::std::os::raw::c_void,
                                    arg2: *mut netsnmp_pdu,
                                    arg3: *mut *mut netsnmp_pdu)
     -> ::std::os::raw::c_int;
    pub fn init_snmp_transport();
    pub fn netsnmp_transport_peer_string(t: *mut netsnmp_transport,
                                         data: *mut ::std::os::raw::c_void,
                                         len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_transport_send(t: *mut netsnmp_transport,
                                  data: *mut ::std::os::raw::c_void,
                                  len: ::std::os::raw::c_int,
                                  opaque: *mut *mut ::std::os::raw::c_void,
                                  olength: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_transport_recv(t: *mut netsnmp_transport,
                                  data: *mut ::std::os::raw::c_void,
                                  len: ::std::os::raw::c_int,
                                  opaque: *mut *mut ::std::os::raw::c_void,
                                  olength: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_transport_add_to_list(transport_list:
                                             *mut *mut netsnmp_transport_list,
                                         transport: *mut netsnmp_transport)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_transport_remove_from_list(transport_list:
                                                  *mut *mut netsnmp_transport_list,
                                              transport:
                                                  *mut netsnmp_transport)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_transport_copy(t: *mut netsnmp_transport)
     -> *mut netsnmp_transport;
    pub fn netsnmp_transport_free(t: *mut netsnmp_transport);
    pub fn netsnmp_tdomain_support(in_oid: *const oid, in_len: libc::size_t,
                                   out_oid: *mut *const oid,
                                   out_len: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_tdomain_register(domain: *mut netsnmp_tdomain)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_tdomain_unregister(domain: *mut netsnmp_tdomain)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_clear_tdomain_list();
    pub fn netsnmp_tdomain_init();
    pub fn netsnmp_tdomain_transport(str: *const ::std::os::raw::c_char,
                                     local: ::std::os::raw::c_int,
                                     default_domain:
                                         *const ::std::os::raw::c_char)
     -> *mut netsnmp_transport;
    pub fn netsnmp_tdomain_transport_full(application:
                                              *const ::std::os::raw::c_char,
                                          str: *const ::std::os::raw::c_char,
                                          local: ::std::os::raw::c_int,
                                          default_domain:
                                              *const ::std::os::raw::c_char,
                                          default_target:
                                              *const ::std::os::raw::c_char)
     -> *mut netsnmp_transport;
    pub fn netsnmp_tdomain_transport_oid(dom: *const oid, dom_len: libc::size_t,
                                         o: *const ::std::os::raw::c_uchar, o_len: libc::size_t,
                                         local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_transport_open_client(application:
                                             *const ::std::os::raw::c_char,
                                         str: *const ::std::os::raw::c_char)
     -> *mut netsnmp_transport;
    pub fn netsnmp_transport_open_server(application:
                                             *const ::std::os::raw::c_char,
                                         str: *const ::std::os::raw::c_char)
     -> *mut netsnmp_transport;
    pub fn netsnmp_transport_open(application: *const ::std::os::raw::c_char,
                                  str: *const ::std::os::raw::c_char,
                                  local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_transport_config_compare(left:
                                                *mut netsnmp_transport_config,
                                            right:
                                                *mut netsnmp_transport_config)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_transport_create_config(key: *mut ::std::os::raw::c_char,
                                           value: *mut ::std::os::raw::c_char)
     -> *mut netsnmp_transport_config;
    pub fn netsnmp_register_default_domain(application:
                                               *const ::std::os::raw::c_char,
                                           domain:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_lookup_default_domain(application:
                                             *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn netsnmp_lookup_default_domains(application:
                                              *const ::std::os::raw::c_char)
     -> *const *const ::std::os::raw::c_char;
    pub fn netsnmp_clear_default_domain();
    pub fn netsnmp_register_default_target(application:
                                               *const ::std::os::raw::c_char,
                                           domain:
                                               *const ::std::os::raw::c_char,
                                           target:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_lookup_default_target(application:
                                             *const ::std::os::raw::c_char,
                                         domain:
                                             *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn netsnmp_clear_default_target();
    pub fn netsnmp_register_service_handlers();
    pub fn netsnmp_callback_transport(arg1: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_callback_hook_parse(sp: *mut netsnmp_session,
                                       pdu: *mut netsnmp_pdu,
                                       packetptr: *mut ::std::os::raw::c_uchar, len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_callback_hook_build(sp: *mut netsnmp_session,
                                       pdu: *mut netsnmp_pdu,
                                       ptk: *mut ::std::os::raw::c_uchar, len: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_callback_check_packet(pkt: *mut ::std::os::raw::c_uchar, len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_callback_create_pdu(transport: *mut netsnmp_transport,
                                       opaque: *mut ::std::os::raw::c_void,
                                       olength: libc::size_t) -> *mut netsnmp_pdu;
    pub fn netsnmp_callback_open(attach_to: ::std::os::raw::c_int,
                                 return_func:
                                     ::std::option::Option<unsafe extern "C" fn(op:
                                                                                    ::std::os::raw::c_int,
                                                                                session:
                                                                                    *mut netsnmp_session,
                                                                                reqid:
                                                                                    ::std::os::raw::c_int,
                                                                                pdu:
                                                                                    *mut netsnmp_pdu,
                                                                                magic:
                                                                                    *mut ::std::os::raw::c_void)
                                                               ->
                                                                   ::std::os::raw::c_int>,
                                 fpre_parse:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut netsnmp_session,
                                                                                arg2:
                                                                                    *mut Struct_netsnmp_transport_s,
                                                                                arg3:
                                                                                    *mut ::std::os::raw::c_void,
                                                                                arg4:
                                                                                    ::std::os::raw::c_int)
                                                               ->
                                                                   ::std::os::raw::c_int>,
                                 fpost_parse:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut netsnmp_session,
                                                                                arg2:
                                                                                    *mut netsnmp_pdu,
                                                                                arg3:
                                                                                    ::std::os::raw::c_int)
                                                               ->
                                                                   ::std::os::raw::c_int>)
     -> *mut netsnmp_session;
    pub fn netsnmp_clear_callback_list();
    pub fn netsnmp_unix_transport(addr: *mut libc::sockaddr_un,
                                  local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_unix_agent_config_tokens_register();
    pub fn netsnmp_unix_parse_security(token: *const ::std::os::raw::c_char,
                                       param: *mut ::std::os::raw::c_char);
    pub fn netsnmp_unix_getSecName(opaque: *mut ::std::os::raw::c_void,
                                   olength: ::std::os::raw::c_int,
                                   community: *const ::std::os::raw::c_char,
                                   community_len: libc::size_t,
                                   secName:
                                       *mut *const ::std::os::raw::c_char,
                                   contextName:
                                       *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_unix_ctor();
    pub fn netsnmp_unix_create_path_with_mode(mode: ::std::os::raw::c_int);
    pub fn netsnmp_unix_dont_create_path();
    pub fn netsnmp_ipv4_fmtaddr(prefix: *const ::std::os::raw::c_char,
                                t: *mut netsnmp_transport,
                                data: *mut ::std::os::raw::c_void,
                                len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_sockaddr_in(addr: *mut libc::sockaddr_in,
                               peername: *const ::std::os::raw::c_char,
                               remote_port: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_sockaddr_in2(addr: *mut libc::sockaddr_in,
                                inpeername: *const ::std::os::raw::c_char,
                                default_target: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn _netsnmp_udp_sockopt_set(fd: ::std::os::raw::c_int,
                                    local: ::std::os::raw::c_int);
    pub fn netsnmp_udpbase_recv(t: *mut netsnmp_transport,
                                buf: *mut ::std::os::raw::c_void,
                                size: ::std::os::raw::c_int,
                                opaque: *mut *mut ::std::os::raw::c_void,
                                olength: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpbase_send(t: *mut netsnmp_transport,
                                buf: *mut ::std::os::raw::c_void,
                                size: ::std::os::raw::c_int,
                                opaque: *mut *mut ::std::os::raw::c_void,
                                olength: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpbase_recvfrom(s: ::std::os::raw::c_int,
                                    buf: *mut ::std::os::raw::c_void,
                                    len: ::std::os::raw::c_int,
                                    from: *mut libc::sockaddr,
                                    fromlen: *mut libc::socklen_t,
                                    dstip: *mut libc::sockaddr,
                                    dstlen: *mut libc::socklen_t,
                                    if_index: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpbase_sendto(fd: ::std::os::raw::c_int,
                                  srcip: *mut libc::in_addr,
                                  if_index: ::std::os::raw::c_int,
                                  remote: *mut libc::sockaddr,
                                  data: *mut ::std::os::raw::c_void,
                                  len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpipv4base_transport(addr: *mut libc::sockaddr_in,
                                         local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_udpipv4_recvfrom(s: ::std::os::raw::c_int,
                                    buf: *mut ::std::os::raw::c_void,
                                    len: ::std::os::raw::c_int,
                                    from: *mut libc::sockaddr,
                                    fromlen: *mut libc::socklen_t,
                                    dstip: *mut libc::sockaddr,
                                    dstlen: *mut libc::socklen_t,
                                    if_index: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpipv4_sendto(fd: ::std::os::raw::c_int,
                                  srcip: *mut libc::in_addr,
                                  if_index: ::std::os::raw::c_int,
                                  remote: *mut libc::sockaddr,
                                  data: *mut ::std::os::raw::c_void,
                                  len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udp_transport(addr: *mut libc::sockaddr_in,
                                 local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_udp_agent_config_tokens_register();
    pub fn netsnmp_udp_parse_security(token: *const ::std::os::raw::c_char,
                                      param: *mut ::std::os::raw::c_char);
    pub fn netsnmp_udp_getSecName(opaque: *mut ::std::os::raw::c_void,
                                  olength: ::std::os::raw::c_int,
                                  community: *const ::std::os::raw::c_char,
                                  community_len: libc::size_t,
                                  secname: *mut *const ::std::os::raw::c_char,
                                  contextName:
                                      *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udp_ctor();
    pub fn netsnmp_udp_fmtaddr(t: *mut netsnmp_transport,
                               data: *mut ::std::os::raw::c_void,
                               len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_udp_recvfrom(s: ::std::os::raw::c_int,
                                buf: *mut ::std::os::raw::c_void,
                                len: ::std::os::raw::c_int,
                                from: *mut libc::sockaddr,
                                fromlen: *mut libc::socklen_t,
                                dstip: *mut libc::sockaddr,
                                dstlen: *mut libc::socklen_t,
                                if_index: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udp_sendto(fd: ::std::os::raw::c_int,
                              srcip: *mut libc::in_addr,
                              if_index: ::std::os::raw::c_int,
                              remote: *mut libc::sockaddr,
                              data: *mut ::std::os::raw::c_void,
                              len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_tcp_transport(addr: *mut libc::sockaddr_in,
                                 local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_tcp_ctor();
    pub fn netsnmp_ipv6_fmtaddr(prefix: *const ::std::os::raw::c_char,
                                t: *mut netsnmp_transport,
                                data: *mut ::std::os::raw::c_void,
                                len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_sockaddr_in6_2(addr: *mut libc::sockaddr_in6,
                                  inpeername: *const ::std::os::raw::c_char,
                                  default_target:
                                      *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_sockaddr_in6(addr: *mut libc::sockaddr_in6,
                                peername: *const ::std::os::raw::c_char,
                                remote_port: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_udp6_transport(addr: *mut libc::sockaddr_in6,
                               local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_udp6_agent_config_tokens_register();
    pub fn netsnmp_udp6_parse_security(token: *const ::std::os::raw::c_char,
                                       param: *mut ::std::os::raw::c_char);
    pub fn netsnmp_udp6_getSecName(opaque: *mut ::std::os::raw::c_void,
                                   olength: ::std::os::raw::c_int,
                                   community: *const ::std::os::raw::c_char,
                                   community_len: ::std::os::raw::c_int,
                                   secname:
                                       *mut *const ::std::os::raw::c_char,
                                   contextName:
                                       *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_udpipv6_ctor();
    pub fn netsnmp_tcp6_transport(addr: *mut libc::sockaddr_in6,
                                  local: ::std::os::raw::c_int)
     -> *mut netsnmp_transport;
    pub fn netsnmp_tcpipv6_ctor();
    pub fn register_config_handler(filePrefix: *const ::std::os::raw::c_char,
                                   token: *const ::std::os::raw::c_char,
                                   parser:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *const ::std::os::raw::c_char,
                                                                                  arg2:
                                                                                      *mut ::std::os::raw::c_char)>,
                                   releaser:
                                       ::std::option::Option<extern "C" fn()>,
                                   usageLine: *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn register_const_config_handler(filePrefix:
                                             *const ::std::os::raw::c_char,
                                         token: *const ::std::os::raw::c_char,
                                         parser:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *const ::std::os::raw::c_char,
                                                                                        arg2:
                                                                                            *const ::std::os::raw::c_char)>,
                                         releaser:
                                             ::std::option::Option<extern "C" fn()>,
                                         usageLine:
                                             *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn register_prenetsnmp_mib_handler(filePrefix:
                                               *const ::std::os::raw::c_char,
                                           token:
                                               *const ::std::os::raw::c_char,
                                           parser:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *const ::std::os::raw::c_char,
                                                                                          arg2:
                                                                                              *mut ::std::os::raw::c_char)>,
                                           releaser:
                                               ::std::option::Option<extern "C" fn()>,
                                           usageLine:
                                               *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn unregister_config_handler(filePrefix:
                                         *const ::std::os::raw::c_char,
                                     token: *const ::std::os::raw::c_char);
    pub fn unregister_all_config_handlers();
    pub fn register_app_config_handler(token: *const ::std::os::raw::c_char,
                                       parser:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *const ::std::os::raw::c_char,
                                                                                      arg2:
                                                                                          *mut ::std::os::raw::c_char)>,
                                       releaser:
                                           ::std::option::Option<extern "C" fn()>,
                                       usageLine:
                                           *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn register_app_prenetsnmp_mib_handler(token:
                                                   *const ::std::os::raw::c_char,
                                               parser:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *const ::std::os::raw::c_char,
                                                                                              arg2:
                                                                                                  *mut ::std::os::raw::c_char)>,
                                               releaser:
                                                   ::std::option::Option<extern "C" fn()>,
                                               usageLine:
                                                   *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn unregister_app_config_handler(token:
                                             *const ::std::os::raw::c_char);
    pub fn read_configs();
    pub fn read_premib_configs();
    pub fn read_config_print_usage(lead: *const ::std::os::raw::c_char);
    pub fn config_perror(arg1: *const ::std::os::raw::c_char);
    pub fn config_pwarn(arg1: *const ::std::os::raw::c_char);
    pub fn netsnmp_config(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_config_remember(arg1: *mut ::std::os::raw::c_char);
    pub fn netsnmp_config_process_memories();
    pub fn read_config(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut Struct_config_line,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn read_config_files(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn free_config();
    pub fn netsnmp_config_error(arg1: *const ::std::os::raw::c_char, ...);
    pub fn netsnmp_config_warn(arg1: *const ::std::os::raw::c_char, ...);
    pub fn skip_white(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn skip_white_const(arg1: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn skip_not_white(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn skip_not_white_const(arg1: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn skip_token(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn skip_token_const(arg1: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn copy_nword(arg1: *mut ::std::os::raw::c_char,
                      arg2: *mut ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn copy_nword_const(arg1: *const ::std::os::raw::c_char,
                            arg2: *mut ::std::os::raw::c_char,
                            arg3: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn copy_word(arg1: *mut ::std::os::raw::c_char,
                     arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_with_type(arg1: *const ::std::os::raw::c_char,
                                 arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn read_config_save_octet_string(saveto: *mut ::std::os::raw::c_char,
                                         str: *mut ::std::os::raw::c_uchar, len: libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_read_octet_string(readfrom:
                                             *const ::std::os::raw::c_char,
                                         str: *mut *mut ::std::os::raw::c_uchar,
                                         len: *mut libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_read_octet_string_const(readfrom:
                                                   *const ::std::os::raw::c_char,
                                               str: *mut *mut ::std::os::raw::c_uchar,
                                               len: *mut libc::size_t)
     -> *const ::std::os::raw::c_char;
    pub fn read_config_read_objid(readfrom: *mut ::std::os::raw::c_char,
                                  objid: *mut *mut oid, len: *mut libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_read_objid_const(readfrom:
                                            *const ::std::os::raw::c_char,
                                        objid: *mut *mut oid,
                                        len: *mut libc::size_t)
     -> *const ::std::os::raw::c_char;
    pub fn read_config_save_objid(saveto: *mut ::std::os::raw::c_char,
                                  objid: *mut oid, len: libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_read_data(_type: ::std::os::raw::c_int,
                                 readfrom: *mut ::std::os::raw::c_char,
                                 dataptr: *mut ::std::os::raw::c_void,
                                 len: *mut libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_read_memory(_type: ::std::os::raw::c_int,
                                   readfrom: *mut ::std::os::raw::c_char,
                                   dataptr: *mut ::std::os::raw::c_char,
                                   len: *mut libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_store_data(_type: ::std::os::raw::c_int,
                                  storeto: *mut ::std::os::raw::c_char,
                                  dataptr: *mut ::std::os::raw::c_void,
                                  len: *mut libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_store_data_prefix(prefix: ::std::os::raw::c_char,
                                         _type: ::std::os::raw::c_int,
                                         storeto: *mut ::std::os::raw::c_char,
                                         dataptr: *mut ::std::os::raw::c_void,
                                         len: libc::size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn read_config_files_of_type(when: ::std::os::raw::c_int,
                                     ctmp: *mut Struct_config_files)
     -> ::std::os::raw::c_int;
    pub fn read_config_store(_type: *const ::std::os::raw::c_char,
                             line: *const ::std::os::raw::c_char);
    pub fn read_app_config_store(line: *const ::std::os::raw::c_char);
    pub fn snmp_save_persistent(_type: *const ::std::os::raw::c_char);
    pub fn snmp_clean_persistent(_type: *const ::std::os::raw::c_char);
    pub fn read_config_get_handlers(_type: *const ::std::os::raw::c_char)
     -> *mut Struct_config_line;
    pub fn snmp_config_remember_in_list(line: *mut ::std::os::raw::c_char,
                                        mem:
                                            *mut *mut Struct_read_config_memory);
    pub fn snmp_config_process_memory_list(mem:
                                               *mut *mut Struct_read_config_memory,
                                           arg1: ::std::os::raw::c_int,
                                           arg2: ::std::os::raw::c_int);
    pub fn snmp_config_remember_free_list(mem:
                                              *mut *mut Struct_read_config_memory);
    pub fn set_configuration_directory(dir: *const ::std::os::raw::c_char);
    pub fn get_configuration_directory() -> *const ::std::os::raw::c_char;
    pub fn set_persistent_directory(dir: *const ::std::os::raw::c_char);
    pub fn get_persistent_directory() -> *const ::std::os::raw::c_char;
    pub fn set_temp_file_pattern(pattern: *const ::std::os::raw::c_char);
    pub fn get_temp_file_pattern() -> *const ::std::os::raw::c_char;
    pub fn handle_long_opt(myoptarg: *const ::std::os::raw::c_char);
    pub fn netsnmp_ds_set_boolean(storeid: ::std::os::raw::c_int,
                                  which: ::std::os::raw::c_int,
                                  value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_get_boolean(storeid: ::std::os::raw::c_int,
                                  which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_toggle_boolean(storeid: ::std::os::raw::c_int,
                                     which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_set_int(storeid: ::std::os::raw::c_int,
                              which: ::std::os::raw::c_int,
                              value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_get_int(storeid: ::std::os::raw::c_int,
                              which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_set_string(storeid: ::std::os::raw::c_int,
                                 which: ::std::os::raw::c_int,
                                 value: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_get_string(storeid: ::std::os::raw::c_int,
                                 which: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn netsnmp_ds_set_void(storeid: ::std::os::raw::c_int,
                               which: ::std::os::raw::c_int,
                               value: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_get_void(storeid: ::std::os::raw::c_int,
                               which: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn netsnmp_ds_register_config(_type: ::std::os::raw::c_uchar,
                                      ftype: *const ::std::os::raw::c_char,
                                      token: *const ::std::os::raw::c_char,
                                      storeid: ::std::os::raw::c_int,
                                      which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_register_premib(_type: ::std::os::raw::c_uchar,
                                      ftype: *const ::std::os::raw::c_char,
                                      token: *const ::std::os::raw::c_char,
                                      storeid: ::std::os::raw::c_int,
                                      which: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_parse_boolean(line: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_ds_shutdown();
    pub fn netsnmp_parse_args(argc: ::std::os::raw::c_int,
                              argv: *mut *mut ::std::os::raw::c_char,
                              session: *mut netsnmp_session,
                              localOpts: *const ::std::os::raw::c_char,
                              _proc:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 ::std::os::raw::c_int,
                                                                             arg2:
                                                                                 *const *mut ::std::os::raw::c_char,
                                                                             arg3:
                                                                                 ::std::os::raw::c_int)>,
                              flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn snmp_parse_args(argc: ::std::os::raw::c_int,
                           argv: *mut *mut ::std::os::raw::c_char,
                           session: *mut netsnmp_session,
                           localOpts: *const ::std::os::raw::c_char,
                           _proc:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              ::std::os::raw::c_int,
                                                                          arg2:
                                                                              *const *mut ::std::os::raw::c_char,
                                                                          arg3:
                                                                              ::std::os::raw::c_int)>)
     -> ::std::os::raw::c_int;
    pub fn snmp_parse_args_descriptions(arg1: *mut libc::FILE);
    pub fn snmp_parse_args_usage(arg1: *mut libc::FILE);
    pub fn init_snmp_enum(_type: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn se_find_list(major: ::std::os::raw::c_uint,
                        minor: ::std::os::raw::c_uint)
     -> *mut Struct_snmp_enum_list;
    pub fn se_find_slist(listname: *const ::std::os::raw::c_char)
     -> *mut Struct_snmp_enum_list;
    pub fn se_store_in_list(arg1: *mut Struct_snmp_enum_list,
                            major: ::std::os::raw::c_uint,
                            minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn se_find_value(major: ::std::os::raw::c_uint,
                         minor: ::std::os::raw::c_uint,
                         label: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn se_find_free_value(major: ::std::os::raw::c_uint,
                              minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn se_find_label(major: ::std::os::raw::c_uint,
                         minor: ::std::os::raw::c_uint,
                         value: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn se_add_pair(major: ::std::os::raw::c_uint,
                       minor: ::std::os::raw::c_uint,
                       label: *mut ::std::os::raw::c_char,
                       value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn se_find_label_in_slist(listname: *const ::std::os::raw::c_char,
                                  value: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn se_find_value_in_slist(listname: *const ::std::os::raw::c_char,
                                  label: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn se_find_free_value_in_slist(listname:
                                           *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn se_add_pair_to_slist(listname: *const ::std::os::raw::c_char,
                                label: *mut ::std::os::raw::c_char,
                                value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn se_find_label_in_list(list: *mut Struct_snmp_enum_list,
                                 value: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn se_find_value_in_list(list: *mut Struct_snmp_enum_list,
                                 label: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn se_find_free_value_in_list(list: *mut Struct_snmp_enum_list)
     -> ::std::os::raw::c_int;
    pub fn se_add_pair_to_list(list: *mut *mut Struct_snmp_enum_list,
                               label: *mut ::std::os::raw::c_char,
                               value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn se_store_enum_list(new_list: *mut Struct_snmp_enum_list,
                              token: *const ::std::os::raw::c_char,
                              _type: *const ::std::os::raw::c_char);
    pub fn se_store_list(major: ::std::os::raw::c_uint,
                         minor: ::std::os::raw::c_uint,
                         _type: *const ::std::os::raw::c_char);
    pub fn se_clear_slist(listname: *const ::std::os::raw::c_char);
    pub fn se_store_slist(listname: *const ::std::os::raw::c_char,
                          _type: *const ::std::os::raw::c_char);
    pub fn se_store_slist_callback(majorID: ::std::os::raw::c_int,
                                   minorID: ::std::os::raw::c_int,
                                   serverargs: *mut ::std::os::raw::c_void,
                                   clientargs: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn se_read_conf(word: *const ::std::os::raw::c_char,
                        cptr: *mut ::std::os::raw::c_char);
    pub fn clear_snmp_enum();
    pub fn init_vacm();
    pub fn vacm_destroyViewEntry(arg1: *const ::std::os::raw::c_char,
                                 arg2: *mut oid, arg3: libc::size_t);
    pub fn vacm_destroyAllViewEntries();
    pub fn vacm_getViewEntry(arg1: *const ::std::os::raw::c_char,
                             arg2: *mut oid, arg3: libc::size_t,
                             arg4: ::std::os::raw::c_int)
     -> *mut Struct_vacm_viewEntry;
    pub fn vacm_checkSubtree(arg1: *const ::std::os::raw::c_char,
                             arg2: *mut oid, arg3: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn vacm_scanViewInit();
    pub fn vacm_scanViewNext() -> *mut Struct_vacm_viewEntry;
    pub fn vacm_createViewEntry(arg1: *const ::std::os::raw::c_char,
                                arg2: *mut oid, arg3: libc::size_t)
     -> *mut Struct_vacm_viewEntry;
    pub fn vacm_destroyGroupEntry(arg1: ::std::os::raw::c_int,
                                  arg2: *const ::std::os::raw::c_char);
    pub fn vacm_destroyAllGroupEntries();
    pub fn vacm_createGroupEntry(arg1: ::std::os::raw::c_int,
                                 arg2: *const ::std::os::raw::c_char)
     -> *mut Struct_vacm_groupEntry;
    pub fn vacm_getGroupEntry(arg1: ::std::os::raw::c_int,
                              arg2: *const ::std::os::raw::c_char)
     -> *mut Struct_vacm_groupEntry;
    pub fn vacm_scanGroupInit();
    pub fn vacm_scanGroupNext() -> *mut Struct_vacm_groupEntry;
    pub fn vacm_destroyAccessEntry(arg1: *const ::std::os::raw::c_char,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int,
                                   arg4: ::std::os::raw::c_int);
    pub fn vacm_destroyAllAccessEntries();
    pub fn vacm_createAccessEntry(arg1: *const ::std::os::raw::c_char,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: ::std::os::raw::c_int,
                                  arg4: ::std::os::raw::c_int)
     -> *mut Struct_vacm_accessEntry;
    pub fn vacm_getAccessEntry(arg1: *const ::std::os::raw::c_char,
                               arg2: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int,
                               arg4: ::std::os::raw::c_int)
     -> *mut Struct_vacm_accessEntry;
    pub fn vacm_scanAccessInit();
    pub fn vacm_scanAccessNext() -> *mut Struct_vacm_accessEntry;
    pub fn vacm_destroySecurityEntry(arg1: *const ::std::os::raw::c_char);
    pub fn vacm_createSecurityEntry(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_vacm_securityEntry;
    pub fn vacm_getSecurityEntry(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_vacm_securityEntry;
    pub fn vacm_scanSecurityInit();
    pub fn vacm_scanSecurityEntry() -> *mut Struct_vacm_securityEntry;
    pub fn vacm_is_configured() -> ::std::os::raw::c_int;
    pub fn vacm_save(token: *const ::std::os::raw::c_char,
                     _type: *const ::std::os::raw::c_char);
    pub fn vacm_save_view(view: *mut Struct_vacm_viewEntry,
                          token: *const ::std::os::raw::c_char,
                          _type: *const ::std::os::raw::c_char);
    pub fn vacm_save_access(access_entry: *mut Struct_vacm_accessEntry,
                            token: *const ::std::os::raw::c_char,
                            _type: *const ::std::os::raw::c_char);
    pub fn vacm_save_auth_access(access_entry: *mut Struct_vacm_accessEntry,
                                 token: *const ::std::os::raw::c_char,
                                 _type: *const ::std::os::raw::c_char,
                                 authtype: ::std::os::raw::c_int);
    pub fn vacm_save_group(group_entry: *mut Struct_vacm_groupEntry,
                           token: *const ::std::os::raw::c_char,
                           _type: *const ::std::os::raw::c_char);
    pub fn vacm_parse_config_view(token: *const ::std::os::raw::c_char,
                                  line: *const ::std::os::raw::c_char);
    pub fn vacm_parse_config_group(token: *const ::std::os::raw::c_char,
                                   line: *const ::std::os::raw::c_char);
    pub fn vacm_parse_config_access(token: *const ::std::os::raw::c_char,
                                    line: *const ::std::os::raw::c_char);
    pub fn vacm_parse_config_auth_access(token: *const ::std::os::raw::c_char,
                                         line: *const ::std::os::raw::c_char);
    pub fn store_vacm(majorID: ::std::os::raw::c_int,
                      minorID: ::std::os::raw::c_int,
                      serverarg: *mut ::std::os::raw::c_void,
                      clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn netsnmp_view_get(head: *mut Struct_vacm_viewEntry,
                            viewName: *const ::std::os::raw::c_char,
                            viewSubtree: *mut oid, viewSubtreeLen: libc::size_t,
                            mode: ::std::os::raw::c_int)
     -> *mut Struct_vacm_viewEntry;
    pub fn setup_engineID(eidp: *mut *mut ::std::os::raw::c_uchar,
                          text: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn engineID_conf(word: *const ::std::os::raw::c_char,
                         cptr: *mut ::std::os::raw::c_char);
    pub fn engineBoots_conf(arg1: *const ::std::os::raw::c_char,
                            arg2: *mut ::std::os::raw::c_char);
    pub fn engineIDType_conf(arg1: *const ::std::os::raw::c_char,
                             arg2: *mut ::std::os::raw::c_char);
    pub fn engineIDNic_conf(arg1: *const ::std::os::raw::c_char,
                            arg2: *mut ::std::os::raw::c_char);
    pub fn snmpv3_authtype_conf(word: *const ::std::os::raw::c_char,
                                cptr: *mut ::std::os::raw::c_char);
    pub fn snmpv3_privtype_conf(word: *const ::std::os::raw::c_char,
                                cptr: *mut ::std::os::raw::c_char);
    pub fn usm_parse_create_usmUser(token: *const ::std::os::raw::c_char,
                                    line: *mut ::std::os::raw::c_char);
    pub fn init_snmpv3(arg1: *const ::std::os::raw::c_char);
    pub fn init_snmpv3_post_config(majorid: ::std::os::raw::c_int,
                                   minorid: ::std::os::raw::c_int,
                                   serverarg: *mut ::std::os::raw::c_void,
                                   clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn init_snmpv3_post_premib_config(majorid: ::std::os::raw::c_int,
                                          minorid: ::std::os::raw::c_int,
                                          serverarg:
                                              *mut ::std::os::raw::c_void,
                                          clientarg:
                                              *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn shutdown_snmpv3(_type: *const ::std::os::raw::c_char);
    pub fn snmpv3_store(majorID: ::std::os::raw::c_int,
                        minorID: ::std::os::raw::c_int,
                        serverarg: *mut ::std::os::raw::c_void,
                        clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_local_snmpEngineBoots() -> ::std::os::raw::c_ulong;
    pub fn snmpv3_clone_engineID(arg1: *mut *mut ::std::os::raw::c_uchar, arg2: *mut libc::size_t,
                                 arg3: *mut ::std::os::raw::c_uchar, arg4: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn snmpv3_get_engineID(buf: *mut ::std::os::raw::c_uchar, buflen: libc::size_t) -> libc::size_t;
    pub fn snmpv3_generate_engineID(arg1: *mut libc::size_t) -> *mut ::std::os::raw::c_uchar;
    pub fn snmpv3_local_snmpEngineTime() -> ::std::os::raw::c_ulong;
    pub fn get_default_secLevel() -> ::std::os::raw::c_int;
    pub fn get_default_authtype(arg1: *mut libc::size_t) -> *const oid;
    pub fn get_default_privtype(arg1: *mut libc::size_t) -> *const oid;
    pub fn snmpv3_set_engineBootsAndTime(boots: ::std::os::raw::c_int,
                                         ttime: ::std::os::raw::c_int);
    pub fn free_engineID(majorid: ::std::os::raw::c_int,
                         minorid: ::std::os::raw::c_int,
                         serverarg: *mut ::std::os::raw::c_void,
                         clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn parse_secLevel_conf(word: *const ::std::os::raw::c_char,
                               cptr: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn generate_Ku(hashtype: *const oid, hashtype_len: ::std::os::raw::c_uint,
                       P: *const ::std::os::raw::c_uchar, pplen: libc::size_t, Ku: *mut ::std::os::raw::c_uchar,
                       kulen: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn generate_kul(hashtype: *const oid, hashtype_len: ::std::os::raw::c_uint,
                        engineID: *const ::std::os::raw::c_uchar, engineID_len: libc::size_t,
                        Ku: *const ::std::os::raw::c_uchar, ku_len: libc::size_t, Kul: *mut ::std::os::raw::c_uchar,
                        kul_len: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn encode_keychange(hashtype: *const oid, hashtype_len: ::std::os::raw::c_uint,
                            oldkey: *mut ::std::os::raw::c_uchar, oldkey_len: libc::size_t,
                            newkey: *mut ::std::os::raw::c_uchar, newkey_len: libc::size_t,
                            kcstring: *mut ::std::os::raw::c_uchar, kcstring_len: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn decode_keychange(hashtype: *const oid, hashtype_len: ::std::os::raw::c_uint,
                            oldkey: *mut ::std::os::raw::c_uchar, oldkey_len: libc::size_t,
                            kcstring: *mut ::std::os::raw::c_uchar, kcstring_len: libc::size_t,
                            newkey: *mut ::std::os::raw::c_uchar, newkey_len: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sc_get_properlength(hashtype: *const oid, hashtype_len: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn sc_get_proper_priv_length(privtype: *const oid,
                                     privtype_len: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn sc_init() -> ::std::os::raw::c_int;
    pub fn sc_shutdown(majorID: ::std::os::raw::c_int,
                       minorID: ::std::os::raw::c_int,
                       serverarg: *mut ::std::os::raw::c_void,
                       clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn sc_random(buf: *mut ::std::os::raw::c_uchar, buflen: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sc_generate_keyed_hash(authtype: *const oid, authtypelen: libc::size_t,
                                  key: *const ::std::os::raw::c_uchar, keylen: ::std::os::raw::c_uint,
                                  message: *const ::std::os::raw::c_uchar, msglen: ::std::os::raw::c_uint,
                                  MAC: *mut ::std::os::raw::c_uchar, maclen: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sc_check_keyed_hash(authtype: *const oid, authtypelen: libc::size_t,
                               key: *const ::std::os::raw::c_uchar, keylen: ::std::os::raw::c_uint,
                               message: *const ::std::os::raw::c_uchar, msglen: ::std::os::raw::c_uint,
                               MAC: *const ::std::os::raw::c_uchar, maclen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn sc_encrypt(privtype: *const oid, privtypelen: libc::size_t,
                      key: *mut ::std::os::raw::c_uchar, keylen: ::std::os::raw::c_uint, iv: *mut ::std::os::raw::c_uchar,
                      ivlen: ::std::os::raw::c_uint, plaintext: *const ::std::os::raw::c_uchar, ptlen: ::std::os::raw::c_uint,
                      ciphertext: *mut ::std::os::raw::c_uchar, ctlen: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sc_decrypt(privtype: *const oid, privtypelen: libc::size_t,
                      key: *mut ::std::os::raw::c_uchar, keylen: ::std::os::raw::c_uint, iv: *mut ::std::os::raw::c_uchar,
                      ivlen: ::std::os::raw::c_uint, ciphertext: *mut ::std::os::raw::c_uchar, ctlen: ::std::os::raw::c_uint,
                      plaintext: *mut ::std::os::raw::c_uchar, ptlen: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn sc_hash(hashtype: *const oid, hashtypelen: libc::size_t,
                   buf: *const ::std::os::raw::c_uchar, buf_len: libc::size_t, MAC: *mut ::std::os::raw::c_uchar,
                   MAC_len: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn sc_get_transform_type(hashtype: *mut oid, hashtype_len: ::std::os::raw::c_uint,
                                 hash_fn:
                                     *mut ::std::option::Option<unsafe extern "C" fn(mode:
                                                                                         ::std::os::raw::c_int,
                                                                                     context:
                                                                                         *mut *mut ::std::os::raw::c_void,
                                                                                     data:
                                                                                         *const ::std::os::raw::c_uchar,
                                                                                     data_len:
                                                                                         ::std::os::raw::c_int,
                                                                                     digest:
                                                                                         *mut *mut ::std::os::raw::c_uchar,
                                                                                     digest_len:
                                                                                         *mut libc::size_t)
                                                                    ->
                                                                        ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn get_enginetime(engineID: *const ::std::os::raw::c_uchar, engineID_len: ::std::os::raw::c_uint,
                          engine_boot: *mut ::std::os::raw::c_uint, engine_time: *mut ::std::os::raw::c_uint,
                          authenticated: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn get_enginetime_ex(engineID: *mut ::std::os::raw::c_uchar, engineID_len: ::std::os::raw::c_uint,
                             engine_boot: *mut ::std::os::raw::c_uint, engine_time: *mut ::std::os::raw::c_uint,
                             last_engine_time: *mut ::std::os::raw::c_uint,
                             authenticated: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn set_enginetime(engineID: *const ::std::os::raw::c_uchar, engineID_len: ::std::os::raw::c_uint,
                          engine_boot: ::std::os::raw::c_uint, engine_time: ::std::os::raw::c_uint,
                          authenticated: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn search_enginetime_list(engineID: *const ::std::os::raw::c_uchar,
                                  engineID_len: ::std::os::raw::c_uint) -> Enginetime;
    pub fn hash_engineID(engineID: *const ::std::os::raw::c_uchar, engineID_len: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dump_etimelist_entry(e: Enginetime, count: ::std::os::raw::c_int);
    pub fn dump_etimelist();
    pub fn free_etimelist();
    pub fn free_enginetime(engineID: *mut ::std::os::raw::c_uchar,
                           engineID_len: libc::size_t);
    pub fn register_sec_mod(arg1: ::std::os::raw::c_int,
                            arg2: *const ::std::os::raw::c_char,
                            arg3: *mut Struct_snmp_secmod_def)
     -> ::std::os::raw::c_int;
    pub fn find_sec_mod(arg1: ::std::os::raw::c_int)
     -> *mut Struct_snmp_secmod_def;
    pub fn unregister_sec_mod(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn init_secmod();
    pub fn clear_sec_mod();
    pub fn usm_malloc_usmStateReference() -> *mut Struct_usmStateReference;
    pub fn usm_free_usmStateReference(old: *mut ::std::os::raw::c_void);
    pub fn usm_set_usmStateReference_name(_ref: *mut Struct_usmStateReference,
                                          name: *mut ::std::os::raw::c_char,
                                          name_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_engine_id(_ref:
                                                   *mut Struct_usmStateReference,
                                               engine_id: *mut ::std::os::raw::c_uchar,
                                               engine_id_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_auth_protocol(_ref:
                                                       *mut Struct_usmStateReference,
                                                   auth_protocol: *mut oid,
                                                   auth_protocol_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_auth_key(_ref:
                                                  *mut Struct_usmStateReference,
                                              auth_key: *mut ::std::os::raw::c_uchar,
                                              auth_key_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_priv_protocol(_ref:
                                                       *mut Struct_usmStateReference,
                                                   priv_protocol: *mut oid,
                                                   priv_protocol_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_priv_key(_ref:
                                                  *mut Struct_usmStateReference,
                                              priv_key: *mut ::std::os::raw::c_uchar,
                                              priv_key_len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_set_usmStateReference_sec_level(_ref:
                                                   *mut Struct_usmStateReference,
                                               sec_level:
                                                   ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn usm_clone_usmStateReference(from: *mut Struct_usmStateReference,
                                       to: *mut *mut Struct_usmStateReference)
     -> ::std::os::raw::c_int;
    pub fn asn_predict_int_length(_type: ::std::os::raw::c_int,
                                  number: ::std::os::raw::c_long, len: libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn asn_predict_length(_type: ::std::os::raw::c_int, ptr: *mut ::std::os::raw::c_uchar,
                              u_char_len: libc::size_t) -> ::std::os::raw::c_int;
    pub fn usm_set_salt(iv: *mut ::std::os::raw::c_uchar, iv_length: *mut libc::size_t,
                        priv_salt: *mut ::std::os::raw::c_uchar, priv_salt_length: libc::size_t,
                        msgSalt: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
    pub fn usm_parse_security_parameters(secParams: *mut ::std::os::raw::c_uchar,
                                         remaining: libc::size_t,
                                         secEngineID: *mut ::std::os::raw::c_uchar,
                                         secEngineIDLen: *mut libc::size_t,
                                         boots_uint: *mut ::std::os::raw::c_uint,
                                         time_uint: *mut ::std::os::raw::c_uint,
                                         secName: *mut ::std::os::raw::c_char,
                                         secNameLen: *mut libc::size_t,
                                         signature: *mut ::std::os::raw::c_uchar,
                                         signature_length: *mut libc::size_t,
                                         salt: *mut ::std::os::raw::c_uchar,
                                         salt_length: *mut libc::size_t,
                                         data_ptr: *mut *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn usm_check_and_update_timeliness(secEngineID: *mut ::std::os::raw::c_uchar,
                                           secEngineIDLen: libc::size_t,
                                           boots_uint: ::std::os::raw::c_uint,
                                           time_uint: ::std::os::raw::c_uint,
                                           error: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn usm_open_session(arg1: *mut netsnmp_session)
     -> ::std::os::raw::c_int;
    pub fn usm_secmod_generate_out_msg(arg1:
                                           *mut Struct_snmp_secmod_outgoing_params)
     -> ::std::os::raw::c_int;
    pub fn usm_secmod_process_in_msg(arg1:
                                         *mut Struct_snmp_secmod_incoming_params)
     -> ::std::os::raw::c_int;
    pub fn usm_generate_out_msg(arg1: ::std::os::raw::c_int,
                                arg2: *mut ::std::os::raw::c_uchar, arg3: libc::size_t,
                                arg4: ::std::os::raw::c_int,
                                arg5: ::std::os::raw::c_int,
                                arg6: *mut ::std::os::raw::c_uchar, arg7: libc::size_t,
                                arg8: *mut ::std::os::raw::c_char,
                                arg9: libc::size_t, arg10: ::std::os::raw::c_int,
                                arg11: *mut ::std::os::raw::c_uchar, arg12: libc::size_t,
                                arg13: *mut ::std::os::raw::c_void,
                                arg14: *mut ::std::os::raw::c_uchar, arg15: *mut libc::size_t,
                                arg16: *mut *mut ::std::os::raw::c_uchar, arg17: *mut libc::size_t)
     -> ::std::os::raw::c_int;
    pub fn usm_rgenerate_out_msg(arg1: ::std::os::raw::c_int,
                                 arg2: *mut ::std::os::raw::c_uchar, arg3: libc::size_t,
                                 arg4: ::std::os::raw::c_int,
                                 arg5: ::std::os::raw::c_int,
                                 arg6: *mut ::std::os::raw::c_uchar, arg7: libc::size_t,
                                 arg8: *mut ::std::os::raw::c_char,
                                 arg9: libc::size_t, arg10: ::std::os::raw::c_int,
                                 arg11: *mut ::std::os::raw::c_uchar, arg12: libc::size_t,
                                 arg13: *mut ::std::os::raw::c_void,
                                 arg14: *mut *mut ::std::os::raw::c_uchar, arg15: *mut libc::size_t,
                                 arg16: *mut libc::size_t) -> ::std::os::raw::c_int;
    pub fn usm_process_in_msg(arg1: ::std::os::raw::c_int, arg2: libc::size_t,
                              arg3: *mut ::std::os::raw::c_uchar, arg4: ::std::os::raw::c_int,
                              arg5: ::std::os::raw::c_int, arg6: *mut ::std::os::raw::c_uchar,
                              arg7: libc::size_t, arg8: *mut ::std::os::raw::c_uchar,
                              arg9: *mut libc::size_t,
                              arg10: *mut ::std::os::raw::c_char,
                              arg11: *mut libc::size_t, arg12: *mut *mut ::std::os::raw::c_uchar,
                              arg13: *mut libc::size_t, arg14: *mut libc::size_t,
                              arg15: *mut *mut ::std::os::raw::c_void,
                              arg16: *mut netsnmp_session, arg17: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
    pub fn usm_check_secLevel(level: ::std::os::raw::c_int,
                              user: *mut Struct_usmUser)
     -> ::std::os::raw::c_int;
    pub fn usm_get_userList() -> *mut Struct_usmUser;
    pub fn usm_get_user(engineID: *mut ::std::os::raw::c_uchar, engineIDLen: libc::size_t,
                        name: *mut ::std::os::raw::c_char)
     -> *mut Struct_usmUser;
    pub fn usm_get_user_from_list(engineID: *mut ::std::os::raw::c_uchar, engineIDLen: libc::size_t,
                                  name: *mut ::std::os::raw::c_char,
                                  userList: *mut Struct_usmUser,
                                  use_default: ::std::os::raw::c_int)
     -> *mut Struct_usmUser;
    pub fn usm_add_user(user: *mut Struct_usmUser) -> *mut Struct_usmUser;
    pub fn usm_add_user_to_list(user: *mut Struct_usmUser,
                                userList: *mut Struct_usmUser)
     -> *mut Struct_usmUser;
    pub fn usm_free_user(user: *mut Struct_usmUser) -> *mut Struct_usmUser;
    pub fn usm_create_user() -> *mut Struct_usmUser;
    pub fn usm_create_initial_user(name: *const ::std::os::raw::c_char,
                                   authProtocol: *const oid,
                                   authProtocolLen: libc::size_t,
                                   privProtocol: *const oid,
                                   privProtocolLen: libc::size_t)
     -> *mut Struct_usmUser;
    pub fn usm_cloneFrom_user(from: *mut Struct_usmUser,
                              to: *mut Struct_usmUser) -> *mut Struct_usmUser;
    pub fn usm_remove_user(user: *mut Struct_usmUser) -> *mut Struct_usmUser;
    pub fn usm_remove_user_from_list(user: *mut Struct_usmUser,
                                     userList: *mut *mut Struct_usmUser)
     -> *mut Struct_usmUser;
    pub fn get_objid(line: *mut ::std::os::raw::c_char, optr: *mut *mut oid,
                     len: *mut libc::size_t) -> *mut ::std::os::raw::c_char;
    pub fn usm_save_users(token: *const ::std::os::raw::c_char,
                          _type: *const ::std::os::raw::c_char);
    pub fn usm_save_users_from_list(user: *mut Struct_usmUser,
                                    token: *const ::std::os::raw::c_char,
                                    _type: *const ::std::os::raw::c_char);
    pub fn usm_save_user(user: *mut Struct_usmUser,
                         token: *const ::std::os::raw::c_char,
                         _type: *const ::std::os::raw::c_char);
    pub fn usm_store_users(arg1: ::std::os::raw::c_int,
                           arg2: ::std::os::raw::c_int,
                           arg3: *mut ::std::os::raw::c_void,
                           arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn usm_read_user(line: *const ::std::os::raw::c_char)
     -> *mut Struct_usmUser;
    pub fn usm_parse_config_usmUser(token: *const ::std::os::raw::c_char,
                                    line: *mut ::std::os::raw::c_char);
    pub fn usm_set_password(token: *const ::std::os::raw::c_char,
                            line: *mut ::std::os::raw::c_char);
    pub fn usm_set_user_password(user: *mut Struct_usmUser,
                                 token: *const ::std::os::raw::c_char,
                                 line: *mut ::std::os::raw::c_char);
    pub fn init_usm();
    pub fn init_usm_conf(app: *const ::std::os::raw::c_char);
    pub fn init_usm_post_config(majorid: ::std::os::raw::c_int,
                                minorid: ::std::os::raw::c_int,
                                serverarg: *mut ::std::os::raw::c_void,
                                clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn deinit_usm_post_config(majorid: ::std::os::raw::c_int,
                                  minorid: ::std::os::raw::c_int,
                                  serverarg: *mut ::std::os::raw::c_void,
                                  clientarg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn clear_user_list();
}
